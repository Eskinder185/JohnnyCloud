import {
  AwsSdkSigV4Signer,
  DEFAULT_MAX_ATTEMPTS,
  DEFAULT_RETRY_MODE,
  DEFAULT_USE_DUALSTACK_ENDPOINT,
  DEFAULT_USE_FIPS_ENDPOINT,
  EndpointCache,
  Sha256,
  __awaiter,
  __generator,
  __values,
  awsEndpointFunctions,
  calculateBodyLength,
  convertToBuffer,
  createDefaultUserAgentProvider,
  customEndpointFunctions,
  getAwsRegionExtensionConfiguration,
  getContentLengthPlugin,
  getEndpointPlugin,
  getHostHeaderPlugin,
  getLoggerPlugin,
  getRecursionDetectionPlugin,
  getRetryPlugin,
  getUserAgentPlugin,
  invalidFunction,
  invalidProvider,
  isEmptyData,
  loadRestJsonErrorCode,
  numToUint8,
  parseJsonBody,
  parseJsonErrorBody,
  parseUrl,
  resolveAwsRegionExtensionConfiguration,
  resolveAwsSdkSigV4Config,
  resolveDefaultsModeConfig,
  resolveEndpoint,
  resolveEndpointConfig,
  resolveHostHeaderConfig,
  resolveRegionConfig,
  resolveRetryConfig,
  resolveUserAgentConfig,
  uint32ArrayFrom
} from "./chunk-SGCIJGHG.js";
import {
  Client,
  Command,
  DefaultIdentityProviderConfig,
  FetchHttpHandler,
  NoOpLogger,
  SENSITIVE_STRING,
  ServiceException,
  _json,
  createAggregatedClient,
  decorateServiceException,
  expectNonNull,
  expectObject,
  expectString,
  fromBase64,
  fromHex,
  getDefaultExtensionConfiguration,
  getHttpAuthSchemeEndpointRuleSetPlugin,
  getHttpSigningPlugin,
  getSerdePlugin,
  isSerializableHeaderValue,
  limitedParseDouble,
  loadConfigsForDefaultMode,
  map,
  requestBuilder,
  resolveDefaultRuntimeConfig,
  sdkStreamMixin,
  streamCollector,
  take,
  toBase64,
  toHex,
  withBaseException
} from "./chunk-Y7RYPMHW.js";
import {
  HttpRequest,
  fromUtf8,
  getHttpHandlerExtensionConfiguration,
  getSmithyContext,
  normalizeProvider,
  resolveHttpHandlerRuntimeConfig,
  toUtf8
} from "./chunk-Z3KL66RP.js";
import {
  __publicField
} from "./chunk-2GTGKKMZ.js";

// node_modules/@aws-sdk/middleware-eventstream/dist-es/eventStreamConfiguration.js
function resolveEventStreamConfig(input) {
  const eventSigner = input.signer;
  const messageSigner = input.signer;
  const newInput = Object.assign(input, {
    eventSigner,
    messageSigner
  });
  const eventStreamPayloadHandler = newInput.eventStreamPayloadHandlerProvider(newInput);
  return Object.assign(newInput, {
    eventStreamPayloadHandler
  });
}

// node_modules/@aws-sdk/middleware-eventstream/dist-es/eventStreamHandlingMiddleware.js
var eventStreamHandlingMiddleware = (options) => (next, context) => async (args) => {
  const { request } = args;
  if (!HttpRequest.isInstance(request))
    return next(args);
  return options.eventStreamPayloadHandler.handle(next, args, context);
};
var eventStreamHandlingMiddlewareOptions = {
  tags: ["EVENT_STREAM", "SIGNATURE", "HANDLE"],
  name: "eventStreamHandlingMiddleware",
  relation: "after",
  toMiddleware: "awsAuthMiddleware",
  override: true
};

// node_modules/@aws-sdk/middleware-eventstream/dist-es/eventStreamHeaderMiddleware.js
var eventStreamHeaderMiddleware = (next) => async (args) => {
  const { request } = args;
  if (!HttpRequest.isInstance(request))
    return next(args);
  request.headers = {
    ...request.headers,
    "content-type": "application/vnd.amazon.eventstream",
    "x-amz-content-sha256": "STREAMING-AWS4-HMAC-SHA256-EVENTS"
  };
  return next({
    ...args,
    request
  });
};
var eventStreamHeaderMiddlewareOptions = {
  step: "build",
  tags: ["EVENT_STREAM", "HEADER", "CONTENT_TYPE", "CONTENT_SHA256"],
  name: "eventStreamHeaderMiddleware",
  override: true
};

// node_modules/@aws-sdk/middleware-eventstream/dist-es/getEventStreamPlugin.js
var getEventStreamPlugin = (options) => ({
  applyToStack: (clientStack) => {
    clientStack.addRelativeTo(eventStreamHandlingMiddleware(options), eventStreamHandlingMiddlewareOptions);
    clientStack.add(eventStreamHeaderMiddleware, eventStreamHeaderMiddlewareOptions);
  }
});

// node_modules/@smithy/eventstream-serde-config-resolver/dist-es/EventStreamSerdeConfig.js
var resolveEventStreamSerdeConfig = (input) => Object.assign(input, {
  eventStreamMarshaller: input.eventStreamSerdeProvider(input)
});

// node_modules/@aws-sdk/client-lex-runtime-v2/dist-es/auth/httpAuthSchemeProvider.js
var defaultLexRuntimeV2HttpAuthSchemeParametersProvider = async (config, context, input) => {
  return {
    operation: getSmithyContext(context).operation,
    region: await normalizeProvider(config.region)() || (() => {
      throw new Error("expected `region` to be configured for `aws.auth#sigv4`");
    })()
  };
};
function createAwsAuthSigv4HttpAuthOption(authParameters) {
  return {
    schemeId: "aws.auth#sigv4",
    signingProperties: {
      name: "lex",
      region: authParameters.region
    },
    propertiesExtractor: (config, context) => ({
      signingProperties: {
        config,
        context
      }
    })
  };
}
var defaultLexRuntimeV2HttpAuthSchemeProvider = (authParameters) => {
  const options = [];
  switch (authParameters.operation) {
    default: {
      options.push(createAwsAuthSigv4HttpAuthOption(authParameters));
    }
  }
  return options;
};
var resolveHttpAuthSchemeConfig = (config) => {
  const config_0 = resolveAwsSdkSigV4Config(config);
  return Object.assign(config_0, {
    authSchemePreference: normalizeProvider(config.authSchemePreference ?? [])
  });
};

// node_modules/@aws-sdk/client-lex-runtime-v2/dist-es/endpoint/EndpointParameters.js
var resolveClientEndpointParameters = (options) => {
  return Object.assign(options, {
    useDualstackEndpoint: options.useDualstackEndpoint ?? false,
    useFipsEndpoint: options.useFipsEndpoint ?? false,
    defaultSigningName: "lex"
  });
};
var commonParams = {
  UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
  Endpoint: { type: "builtInParams", name: "endpoint" },
  Region: { type: "builtInParams", name: "region" },
  UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
};

// node_modules/@aws-sdk/client-lex-runtime-v2/package.json
var package_default = {
  name: "@aws-sdk/client-lex-runtime-v2",
  description: "AWS SDK for JavaScript Lex Runtime V2 Client for Node.js, Browser and React Native",
  version: "3.888.0",
  scripts: {
    build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
    "build:cjs": "node ../../scripts/compilation/inline client-lex-runtime-v2",
    "build:es": "tsc -p tsconfig.es.json",
    "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
    "build:types": "tsc -p tsconfig.types.json",
    "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
    clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
    "extract:docs": "api-extractor run --local",
    "generate:client": "node ../../scripts/generate-clients/single-service --solo lex-runtime-v2"
  },
  main: "./dist-cjs/index.js",
  types: "./dist-types/index.d.ts",
  module: "./dist-es/index.js",
  sideEffects: false,
  dependencies: {
    "@aws-crypto/sha256-browser": "5.2.0",
    "@aws-crypto/sha256-js": "5.2.0",
    "@aws-sdk/core": "3.888.0",
    "@aws-sdk/credential-provider-node": "3.888.0",
    "@aws-sdk/eventstream-handler-node": "3.887.0",
    "@aws-sdk/middleware-eventstream": "3.887.0",
    "@aws-sdk/middleware-host-header": "3.887.0",
    "@aws-sdk/middleware-logger": "3.887.0",
    "@aws-sdk/middleware-recursion-detection": "3.887.0",
    "@aws-sdk/middleware-user-agent": "3.888.0",
    "@aws-sdk/region-config-resolver": "3.887.0",
    "@aws-sdk/types": "3.887.0",
    "@aws-sdk/util-endpoints": "3.887.0",
    "@aws-sdk/util-user-agent-browser": "3.887.0",
    "@aws-sdk/util-user-agent-node": "3.888.0",
    "@smithy/config-resolver": "^4.2.1",
    "@smithy/core": "^3.11.0",
    "@smithy/eventstream-serde-browser": "^4.1.1",
    "@smithy/eventstream-serde-config-resolver": "^4.2.1",
    "@smithy/eventstream-serde-node": "^4.1.1",
    "@smithy/fetch-http-handler": "^5.2.1",
    "@smithy/hash-node": "^4.1.1",
    "@smithy/invalid-dependency": "^4.1.1",
    "@smithy/middleware-content-length": "^4.1.1",
    "@smithy/middleware-endpoint": "^4.2.1",
    "@smithy/middleware-retry": "^4.2.1",
    "@smithy/middleware-serde": "^4.1.1",
    "@smithy/middleware-stack": "^4.1.1",
    "@smithy/node-config-provider": "^4.2.1",
    "@smithy/node-http-handler": "^4.2.1",
    "@smithy/protocol-http": "^5.2.1",
    "@smithy/smithy-client": "^4.6.1",
    "@smithy/types": "^4.5.0",
    "@smithy/url-parser": "^4.1.1",
    "@smithy/util-base64": "^4.1.0",
    "@smithy/util-body-length-browser": "^4.1.0",
    "@smithy/util-body-length-node": "^4.1.0",
    "@smithy/util-defaults-mode-browser": "^4.1.1",
    "@smithy/util-defaults-mode-node": "^4.1.1",
    "@smithy/util-endpoints": "^3.1.1",
    "@smithy/util-middleware": "^4.1.1",
    "@smithy/util-retry": "^4.1.1",
    "@smithy/util-stream": "^4.3.1",
    "@smithy/util-utf8": "^4.1.0",
    tslib: "^2.6.2"
  },
  devDependencies: {
    "@tsconfig/node18": "18.2.4",
    "@types/node": "^18.19.69",
    concurrently: "7.0.0",
    "downlevel-dts": "0.10.1",
    rimraf: "3.0.2",
    typescript: "~5.8.3"
  },
  engines: {
    node: ">=18.0.0"
  },
  typesVersions: {
    "<4.0": {
      "dist-types/*": [
        "dist-types/ts3.4/*"
      ]
    }
  },
  files: [
    "dist-*/**"
  ],
  author: {
    name: "AWS SDK for JavaScript Team",
    url: "https://aws.amazon.com/javascript/"
  },
  license: "Apache-2.0",
  browser: {
    "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
  },
  "react-native": {
    "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
  },
  homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-lex-runtime-v2",
  repository: {
    type: "git",
    url: "https://github.com/aws/aws-sdk-js-v3.git",
    directory: "clients/client-lex-runtime-v2"
  }
};

// node_modules/@aws-crypto/crc32/build/module/aws_crc32.js
var AwsCrc32 = (
  /** @class */
  function() {
    function AwsCrc322() {
      this.crc32 = new Crc32();
    }
    AwsCrc322.prototype.update = function(toHash) {
      if (isEmptyData(toHash))
        return;
      this.crc32.update(convertToBuffer(toHash));
    };
    AwsCrc322.prototype.digest = function() {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          return [2, numToUint8(this.crc32.digest())];
        });
      });
    };
    AwsCrc322.prototype.reset = function() {
      this.crc32 = new Crc32();
    };
    return AwsCrc322;
  }()
);

// node_modules/@aws-crypto/crc32/build/module/index.js
var Crc32 = (
  /** @class */
  function() {
    function Crc322() {
      this.checksum = 4294967295;
    }
    Crc322.prototype.update = function(data) {
      var e_1, _a;
      try {
        for (var data_1 = __values(data), data_1_1 = data_1.next(); !data_1_1.done; data_1_1 = data_1.next()) {
          var byte = data_1_1.value;
          this.checksum = this.checksum >>> 8 ^ lookupTable[(this.checksum ^ byte) & 255];
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (data_1_1 && !data_1_1.done && (_a = data_1.return))
            _a.call(data_1);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      return this;
    };
    Crc322.prototype.digest = function() {
      return (this.checksum ^ 4294967295) >>> 0;
    };
    return Crc322;
  }()
);
var a_lookUpTable = [
  0,
  1996959894,
  3993919788,
  2567524794,
  124634137,
  1886057615,
  3915621685,
  2657392035,
  249268274,
  2044508324,
  3772115230,
  2547177864,
  162941995,
  2125561021,
  3887607047,
  2428444049,
  498536548,
  1789927666,
  4089016648,
  2227061214,
  450548861,
  1843258603,
  4107580753,
  2211677639,
  325883990,
  1684777152,
  4251122042,
  2321926636,
  335633487,
  1661365465,
  4195302755,
  2366115317,
  997073096,
  1281953886,
  3579855332,
  2724688242,
  1006888145,
  1258607687,
  3524101629,
  2768942443,
  901097722,
  1119000684,
  3686517206,
  2898065728,
  853044451,
  1172266101,
  3705015759,
  2882616665,
  651767980,
  1373503546,
  3369554304,
  3218104598,
  565507253,
  1454621731,
  3485111705,
  3099436303,
  671266974,
  1594198024,
  3322730930,
  2970347812,
  795835527,
  1483230225,
  3244367275,
  3060149565,
  1994146192,
  31158534,
  2563907772,
  4023717930,
  1907459465,
  112637215,
  2680153253,
  3904427059,
  2013776290,
  251722036,
  2517215374,
  3775830040,
  2137656763,
  141376813,
  2439277719,
  3865271297,
  1802195444,
  476864866,
  2238001368,
  4066508878,
  1812370925,
  453092731,
  2181625025,
  4111451223,
  1706088902,
  314042704,
  2344532202,
  4240017532,
  1658658271,
  366619977,
  2362670323,
  4224994405,
  1303535960,
  984961486,
  2747007092,
  3569037538,
  1256170817,
  1037604311,
  2765210733,
  3554079995,
  1131014506,
  879679996,
  2909243462,
  3663771856,
  1141124467,
  855842277,
  2852801631,
  3708648649,
  1342533948,
  654459306,
  3188396048,
  3373015174,
  1466479909,
  544179635,
  3110523913,
  3462522015,
  1591671054,
  702138776,
  2966460450,
  3352799412,
  1504918807,
  783551873,
  3082640443,
  3233442989,
  3988292384,
  2596254646,
  62317068,
  1957810842,
  3939845945,
  2647816111,
  81470997,
  1943803523,
  3814918930,
  2489596804,
  225274430,
  2053790376,
  3826175755,
  2466906013,
  167816743,
  2097651377,
  4027552580,
  2265490386,
  503444072,
  1762050814,
  4150417245,
  2154129355,
  426522225,
  1852507879,
  4275313526,
  2312317920,
  282753626,
  1742555852,
  4189708143,
  2394877945,
  397917763,
  1622183637,
  3604390888,
  2714866558,
  953729732,
  1340076626,
  3518719985,
  2797360999,
  1068828381,
  1219638859,
  3624741850,
  2936675148,
  906185462,
  1090812512,
  3747672003,
  2825379669,
  829329135,
  1181335161,
  3412177804,
  3160834842,
  628085408,
  1382605366,
  3423369109,
  3138078467,
  570562233,
  1426400815,
  3317316542,
  2998733608,
  733239954,
  1555261956,
  3268935591,
  3050360625,
  752459403,
  1541320221,
  2607071920,
  3965973030,
  1969922972,
  40735498,
  2617837225,
  3943577151,
  1913087877,
  83908371,
  2512341634,
  3803740692,
  2075208622,
  213261112,
  2463272603,
  3855990285,
  2094854071,
  198958881,
  2262029012,
  4057260610,
  1759359992,
  534414190,
  2176718541,
  4139329115,
  1873836001,
  414664567,
  2282248934,
  4279200368,
  1711684554,
  285281116,
  2405801727,
  4167216745,
  1634467795,
  376229701,
  2685067896,
  3608007406,
  1308918612,
  956543938,
  2808555105,
  3495958263,
  1231636301,
  1047427035,
  2932959818,
  3654703836,
  1088359270,
  936918e3,
  2847714899,
  3736837829,
  1202900863,
  817233897,
  3183342108,
  3401237130,
  1404277552,
  615818150,
  3134207493,
  3453421203,
  1423857449,
  601450431,
  3009837614,
  3294710456,
  1567103746,
  711928724,
  3020668471,
  3272380065,
  1510334235,
  755167117
];
var lookupTable = uint32ArrayFrom(a_lookUpTable);

// node_modules/@smithy/eventstream-codec/dist-es/Int64.js
var Int64 = class _Int64 {
  constructor(bytes) {
    this.bytes = bytes;
    if (bytes.byteLength !== 8) {
      throw new Error("Int64 buffers must be exactly 8 bytes");
    }
  }
  static fromNumber(number) {
    if (number > 9223372036854776e3 || number < -9223372036854776e3) {
      throw new Error(`${number} is too large (or, if negative, too small) to represent as an Int64`);
    }
    const bytes = new Uint8Array(8);
    for (let i2 = 7, remaining = Math.abs(Math.round(number)); i2 > -1 && remaining > 0; i2--, remaining /= 256) {
      bytes[i2] = remaining;
    }
    if (number < 0) {
      negate(bytes);
    }
    return new _Int64(bytes);
  }
  valueOf() {
    const bytes = this.bytes.slice(0);
    const negative = bytes[0] & 128;
    if (negative) {
      negate(bytes);
    }
    return parseInt(toHex(bytes), 16) * (negative ? -1 : 1);
  }
  toString() {
    return String(this.valueOf());
  }
};
function negate(bytes) {
  for (let i2 = 0; i2 < 8; i2++) {
    bytes[i2] ^= 255;
  }
  for (let i2 = 7; i2 > -1; i2--) {
    bytes[i2]++;
    if (bytes[i2] !== 0)
      break;
  }
}

// node_modules/@smithy/eventstream-codec/dist-es/HeaderMarshaller.js
var HeaderMarshaller = class {
  constructor(toUtf82, fromUtf82) {
    this.toUtf8 = toUtf82;
    this.fromUtf8 = fromUtf82;
  }
  format(headers) {
    const chunks = [];
    for (const headerName of Object.keys(headers)) {
      const bytes = this.fromUtf8(headerName);
      chunks.push(Uint8Array.from([bytes.byteLength]), bytes, this.formatHeaderValue(headers[headerName]));
    }
    const out = new Uint8Array(chunks.reduce((carry, bytes) => carry + bytes.byteLength, 0));
    let position = 0;
    for (const chunk of chunks) {
      out.set(chunk, position);
      position += chunk.byteLength;
    }
    return out;
  }
  formatHeaderValue(header) {
    switch (header.type) {
      case "boolean":
        return Uint8Array.from([header.value ? 0 : 1]);
      case "byte":
        return Uint8Array.from([2, header.value]);
      case "short":
        const shortView = new DataView(new ArrayBuffer(3));
        shortView.setUint8(0, 3);
        shortView.setInt16(1, header.value, false);
        return new Uint8Array(shortView.buffer);
      case "integer":
        const intView = new DataView(new ArrayBuffer(5));
        intView.setUint8(0, 4);
        intView.setInt32(1, header.value, false);
        return new Uint8Array(intView.buffer);
      case "long":
        const longBytes = new Uint8Array(9);
        longBytes[0] = 5;
        longBytes.set(header.value.bytes, 1);
        return longBytes;
      case "binary":
        const binView = new DataView(new ArrayBuffer(3 + header.value.byteLength));
        binView.setUint8(0, 6);
        binView.setUint16(1, header.value.byteLength, false);
        const binBytes = new Uint8Array(binView.buffer);
        binBytes.set(header.value, 3);
        return binBytes;
      case "string":
        const utf8Bytes = this.fromUtf8(header.value);
        const strView = new DataView(new ArrayBuffer(3 + utf8Bytes.byteLength));
        strView.setUint8(0, 7);
        strView.setUint16(1, utf8Bytes.byteLength, false);
        const strBytes = new Uint8Array(strView.buffer);
        strBytes.set(utf8Bytes, 3);
        return strBytes;
      case "timestamp":
        const tsBytes = new Uint8Array(9);
        tsBytes[0] = 8;
        tsBytes.set(Int64.fromNumber(header.value.valueOf()).bytes, 1);
        return tsBytes;
      case "uuid":
        if (!UUID_PATTERN.test(header.value)) {
          throw new Error(`Invalid UUID received: ${header.value}`);
        }
        const uuidBytes = new Uint8Array(17);
        uuidBytes[0] = 9;
        uuidBytes.set(fromHex(header.value.replace(/\-/g, "")), 1);
        return uuidBytes;
    }
  }
  parse(headers) {
    const out = {};
    let position = 0;
    while (position < headers.byteLength) {
      const nameLength = headers.getUint8(position++);
      const name = this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, nameLength));
      position += nameLength;
      switch (headers.getUint8(position++)) {
        case 0:
          out[name] = {
            type: BOOLEAN_TAG,
            value: true
          };
          break;
        case 1:
          out[name] = {
            type: BOOLEAN_TAG,
            value: false
          };
          break;
        case 2:
          out[name] = {
            type: BYTE_TAG,
            value: headers.getInt8(position++)
          };
          break;
        case 3:
          out[name] = {
            type: SHORT_TAG,
            value: headers.getInt16(position, false)
          };
          position += 2;
          break;
        case 4:
          out[name] = {
            type: INT_TAG,
            value: headers.getInt32(position, false)
          };
          position += 4;
          break;
        case 5:
          out[name] = {
            type: LONG_TAG,
            value: new Int64(new Uint8Array(headers.buffer, headers.byteOffset + position, 8))
          };
          position += 8;
          break;
        case 6:
          const binaryLength = headers.getUint16(position, false);
          position += 2;
          out[name] = {
            type: BINARY_TAG,
            value: new Uint8Array(headers.buffer, headers.byteOffset + position, binaryLength)
          };
          position += binaryLength;
          break;
        case 7:
          const stringLength = headers.getUint16(position, false);
          position += 2;
          out[name] = {
            type: STRING_TAG,
            value: this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, stringLength))
          };
          position += stringLength;
          break;
        case 8:
          out[name] = {
            type: TIMESTAMP_TAG,
            value: new Date(new Int64(new Uint8Array(headers.buffer, headers.byteOffset + position, 8)).valueOf())
          };
          position += 8;
          break;
        case 9:
          const uuidBytes = new Uint8Array(headers.buffer, headers.byteOffset + position, 16);
          position += 16;
          out[name] = {
            type: UUID_TAG,
            value: `${toHex(uuidBytes.subarray(0, 4))}-${toHex(uuidBytes.subarray(4, 6))}-${toHex(uuidBytes.subarray(6, 8))}-${toHex(uuidBytes.subarray(8, 10))}-${toHex(uuidBytes.subarray(10))}`
          };
          break;
        default:
          throw new Error(`Unrecognized header type tag`);
      }
    }
    return out;
  }
};
var HEADER_VALUE_TYPE;
(function(HEADER_VALUE_TYPE2) {
  HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["boolTrue"] = 0] = "boolTrue";
  HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["boolFalse"] = 1] = "boolFalse";
  HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["byte"] = 2] = "byte";
  HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["short"] = 3] = "short";
  HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["integer"] = 4] = "integer";
  HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["long"] = 5] = "long";
  HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["byteArray"] = 6] = "byteArray";
  HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["string"] = 7] = "string";
  HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["timestamp"] = 8] = "timestamp";
  HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["uuid"] = 9] = "uuid";
})(HEADER_VALUE_TYPE || (HEADER_VALUE_TYPE = {}));
var BOOLEAN_TAG = "boolean";
var BYTE_TAG = "byte";
var SHORT_TAG = "short";
var INT_TAG = "integer";
var LONG_TAG = "long";
var BINARY_TAG = "binary";
var STRING_TAG = "string";
var TIMESTAMP_TAG = "timestamp";
var UUID_TAG = "uuid";
var UUID_PATTERN = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;

// node_modules/@smithy/eventstream-codec/dist-es/splitMessage.js
var PRELUDE_MEMBER_LENGTH = 4;
var PRELUDE_LENGTH = PRELUDE_MEMBER_LENGTH * 2;
var CHECKSUM_LENGTH = 4;
var MINIMUM_MESSAGE_LENGTH = PRELUDE_LENGTH + CHECKSUM_LENGTH * 2;
function splitMessage({ byteLength, byteOffset, buffer }) {
  if (byteLength < MINIMUM_MESSAGE_LENGTH) {
    throw new Error("Provided message too short to accommodate event stream message overhead");
  }
  const view = new DataView(buffer, byteOffset, byteLength);
  const messageLength = view.getUint32(0, false);
  if (byteLength !== messageLength) {
    throw new Error("Reported message length does not match received message length");
  }
  const headerLength = view.getUint32(PRELUDE_MEMBER_LENGTH, false);
  const expectedPreludeChecksum = view.getUint32(PRELUDE_LENGTH, false);
  const expectedMessageChecksum = view.getUint32(byteLength - CHECKSUM_LENGTH, false);
  const checksummer = new Crc32().update(new Uint8Array(buffer, byteOffset, PRELUDE_LENGTH));
  if (expectedPreludeChecksum !== checksummer.digest()) {
    throw new Error(`The prelude checksum specified in the message (${expectedPreludeChecksum}) does not match the calculated CRC32 checksum (${checksummer.digest()})`);
  }
  checksummer.update(new Uint8Array(buffer, byteOffset + PRELUDE_LENGTH, byteLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH)));
  if (expectedMessageChecksum !== checksummer.digest()) {
    throw new Error(`The message checksum (${checksummer.digest()}) did not match the expected value of ${expectedMessageChecksum}`);
  }
  return {
    headers: new DataView(buffer, byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH, headerLength),
    body: new Uint8Array(buffer, byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH + headerLength, messageLength - headerLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH + CHECKSUM_LENGTH))
  };
}

// node_modules/@smithy/eventstream-codec/dist-es/EventStreamCodec.js
var EventStreamCodec = class {
  constructor(toUtf82, fromUtf82) {
    this.headerMarshaller = new HeaderMarshaller(toUtf82, fromUtf82);
    this.messageBuffer = [];
    this.isEndOfStream = false;
  }
  feed(message) {
    this.messageBuffer.push(this.decode(message));
  }
  endOfStream() {
    this.isEndOfStream = true;
  }
  getMessage() {
    const message = this.messageBuffer.pop();
    const isEndOfStream = this.isEndOfStream;
    return {
      getMessage() {
        return message;
      },
      isEndOfStream() {
        return isEndOfStream;
      }
    };
  }
  getAvailableMessages() {
    const messages = this.messageBuffer;
    this.messageBuffer = [];
    const isEndOfStream = this.isEndOfStream;
    return {
      getMessages() {
        return messages;
      },
      isEndOfStream() {
        return isEndOfStream;
      }
    };
  }
  encode({ headers: rawHeaders, body }) {
    const headers = this.headerMarshaller.format(rawHeaders);
    const length = headers.byteLength + body.byteLength + 16;
    const out = new Uint8Array(length);
    const view = new DataView(out.buffer, out.byteOffset, out.byteLength);
    const checksum = new Crc32();
    view.setUint32(0, length, false);
    view.setUint32(4, headers.byteLength, false);
    view.setUint32(8, checksum.update(out.subarray(0, 8)).digest(), false);
    out.set(headers, 12);
    out.set(body, headers.byteLength + 12);
    view.setUint32(length - 4, checksum.update(out.subarray(8, length - 4)).digest(), false);
    return out;
  }
  decode(message) {
    const { headers, body } = splitMessage(message);
    return { headers: this.headerMarshaller.parse(headers), body };
  }
  formatHeaders(rawHeaders) {
    return this.headerMarshaller.format(rawHeaders);
  }
};

// node_modules/@smithy/eventstream-codec/dist-es/MessageDecoderStream.js
var MessageDecoderStream = class {
  constructor(options) {
    this.options = options;
  }
  [Symbol.asyncIterator]() {
    return this.asyncIterator();
  }
  async *asyncIterator() {
    for await (const bytes of this.options.inputStream) {
      const decoded = this.options.decoder.decode(bytes);
      yield decoded;
    }
  }
};

// node_modules/@smithy/eventstream-codec/dist-es/MessageEncoderStream.js
var MessageEncoderStream = class {
  constructor(options) {
    this.options = options;
  }
  [Symbol.asyncIterator]() {
    return this.asyncIterator();
  }
  async *asyncIterator() {
    for await (const msg of this.options.messageStream) {
      const encoded = this.options.encoder.encode(msg);
      yield encoded;
    }
    if (this.options.includeEndFrame) {
      yield new Uint8Array(0);
    }
  }
};

// node_modules/@smithy/eventstream-codec/dist-es/SmithyMessageDecoderStream.js
var SmithyMessageDecoderStream = class {
  constructor(options) {
    this.options = options;
  }
  [Symbol.asyncIterator]() {
    return this.asyncIterator();
  }
  async *asyncIterator() {
    for await (const message of this.options.messageStream) {
      const deserialized = await this.options.deserializer(message);
      if (deserialized === void 0)
        continue;
      yield deserialized;
    }
  }
};

// node_modules/@smithy/eventstream-codec/dist-es/SmithyMessageEncoderStream.js
var SmithyMessageEncoderStream = class {
  constructor(options) {
    this.options = options;
  }
  [Symbol.asyncIterator]() {
    return this.asyncIterator();
  }
  async *asyncIterator() {
    for await (const chunk of this.options.inputStream) {
      const payloadBuf = this.options.serializer(chunk);
      yield payloadBuf;
    }
  }
};

// node_modules/@smithy/eventstream-serde-universal/dist-es/getChunkedStream.js
function getChunkedStream(source) {
  let currentMessageTotalLength = 0;
  let currentMessagePendingLength = 0;
  let currentMessage = null;
  let messageLengthBuffer = null;
  const allocateMessage = (size) => {
    if (typeof size !== "number") {
      throw new Error("Attempted to allocate an event message where size was not a number: " + size);
    }
    currentMessageTotalLength = size;
    currentMessagePendingLength = 4;
    currentMessage = new Uint8Array(size);
    const currentMessageView = new DataView(currentMessage.buffer);
    currentMessageView.setUint32(0, size, false);
  };
  const iterator = async function* () {
    const sourceIterator = source[Symbol.asyncIterator]();
    while (true) {
      const { value, done } = await sourceIterator.next();
      if (done) {
        if (!currentMessageTotalLength) {
          return;
        } else if (currentMessageTotalLength === currentMessagePendingLength) {
          yield currentMessage;
        } else {
          throw new Error("Truncated event message received.");
        }
        return;
      }
      const chunkLength = value.length;
      let currentOffset = 0;
      while (currentOffset < chunkLength) {
        if (!currentMessage) {
          const bytesRemaining = chunkLength - currentOffset;
          if (!messageLengthBuffer) {
            messageLengthBuffer = new Uint8Array(4);
          }
          const numBytesForTotal = Math.min(4 - currentMessagePendingLength, bytesRemaining);
          messageLengthBuffer.set(value.slice(currentOffset, currentOffset + numBytesForTotal), currentMessagePendingLength);
          currentMessagePendingLength += numBytesForTotal;
          currentOffset += numBytesForTotal;
          if (currentMessagePendingLength < 4) {
            break;
          }
          allocateMessage(new DataView(messageLengthBuffer.buffer).getUint32(0, false));
          messageLengthBuffer = null;
        }
        const numBytesToWrite = Math.min(currentMessageTotalLength - currentMessagePendingLength, chunkLength - currentOffset);
        currentMessage.set(value.slice(currentOffset, currentOffset + numBytesToWrite), currentMessagePendingLength);
        currentMessagePendingLength += numBytesToWrite;
        currentOffset += numBytesToWrite;
        if (currentMessageTotalLength && currentMessageTotalLength === currentMessagePendingLength) {
          yield currentMessage;
          currentMessage = null;
          currentMessageTotalLength = 0;
          currentMessagePendingLength = 0;
        }
      }
    }
  };
  return {
    [Symbol.asyncIterator]: iterator
  };
}

// node_modules/@smithy/eventstream-serde-universal/dist-es/getUnmarshalledStream.js
function getMessageUnmarshaller(deserializer, toUtf82) {
  return async function(message) {
    const { value: messageType } = message.headers[":message-type"];
    if (messageType === "error") {
      const unmodeledError = new Error(message.headers[":error-message"].value || "UnknownError");
      unmodeledError.name = message.headers[":error-code"].value;
      throw unmodeledError;
    } else if (messageType === "exception") {
      const code = message.headers[":exception-type"].value;
      const exception = { [code]: message };
      const deserializedException = await deserializer(exception);
      if (deserializedException.$unknown) {
        const error = new Error(toUtf82(message.body));
        error.name = code;
        throw error;
      }
      throw deserializedException[code];
    } else if (messageType === "event") {
      const event = {
        [message.headers[":event-type"].value]: message
      };
      const deserialized = await deserializer(event);
      if (deserialized.$unknown)
        return;
      return deserialized;
    } else {
      throw Error(`Unrecognizable event type: ${message.headers[":event-type"].value}`);
    }
  };
}

// node_modules/@smithy/eventstream-serde-universal/dist-es/EventStreamMarshaller.js
var EventStreamMarshaller = class {
  constructor({ utf8Encoder, utf8Decoder }) {
    this.eventStreamCodec = new EventStreamCodec(utf8Encoder, utf8Decoder);
    this.utfEncoder = utf8Encoder;
  }
  deserialize(body, deserializer) {
    const inputStream = getChunkedStream(body);
    return new SmithyMessageDecoderStream({
      messageStream: new MessageDecoderStream({ inputStream, decoder: this.eventStreamCodec }),
      deserializer: getMessageUnmarshaller(deserializer, this.utfEncoder)
    });
  }
  serialize(inputStream, serializer) {
    return new MessageEncoderStream({
      messageStream: new SmithyMessageEncoderStream({ inputStream, serializer }),
      encoder: this.eventStreamCodec,
      includeEndFrame: true
    });
  }
};

// node_modules/@smithy/eventstream-serde-browser/dist-es/utils.js
var readableStreamtoIterable = (readableStream) => ({
  [Symbol.asyncIterator]: async function* () {
    const reader = readableStream.getReader();
    try {
      while (true) {
        const { done, value } = await reader.read();
        if (done)
          return;
        yield value;
      }
    } finally {
      reader.releaseLock();
    }
  }
});
var iterableToReadableStream = (asyncIterable) => {
  const iterator = asyncIterable[Symbol.asyncIterator]();
  return new ReadableStream({
    async pull(controller) {
      const { done, value } = await iterator.next();
      if (done) {
        return controller.close();
      }
      controller.enqueue(value);
    }
  });
};

// node_modules/@smithy/eventstream-serde-browser/dist-es/EventStreamMarshaller.js
var EventStreamMarshaller2 = class {
  constructor({ utf8Encoder, utf8Decoder }) {
    this.universalMarshaller = new EventStreamMarshaller({
      utf8Decoder,
      utf8Encoder
    });
  }
  deserialize(body, deserializer) {
    const bodyIterable = isReadableStream(body) ? readableStreamtoIterable(body) : body;
    return this.universalMarshaller.deserialize(bodyIterable, deserializer);
  }
  serialize(input, serializer) {
    const serialziedIterable = this.universalMarshaller.serialize(input, serializer);
    return typeof ReadableStream === "function" ? iterableToReadableStream(serialziedIterable) : serialziedIterable;
  }
};
var isReadableStream = (body) => typeof ReadableStream === "function" && body instanceof ReadableStream;

// node_modules/@smithy/eventstream-serde-browser/dist-es/provider.js
var eventStreamSerdeProvider = (options) => new EventStreamMarshaller2(options);

// node_modules/@aws-sdk/client-lex-runtime-v2/dist-es/endpoint/ruleset.js
var s = "required";
var t = "fn";
var u = "argv";
var v = "ref";
var a = true;
var b = "isSet";
var c = "booleanEquals";
var d = "error";
var e = "endpoint";
var f = "tree";
var g = "PartitionResult";
var h = { [s]: false, "type": "String" };
var i = { [s]: true, "default": false, "type": "Boolean" };
var j = { [v]: "Endpoint" };
var k = { [t]: c, [u]: [{ [v]: "UseFIPS" }, true] };
var l = { [t]: c, [u]: [{ [v]: "UseDualStack" }, true] };
var m = {};
var n = { [t]: "getAttr", [u]: [{ [v]: g }, "supportsFIPS"] };
var o = { [t]: c, [u]: [true, { [t]: "getAttr", [u]: [{ [v]: g }, "supportsDualStack"] }] };
var p = [k];
var q = [l];
var r = [{ [v]: "Region" }];
var _data = { version: "1.0", parameters: { Region: h, UseDualStack: i, UseFIPS: i, Endpoint: h }, rules: [{ conditions: [{ [t]: b, [u]: [j] }], rules: [{ conditions: p, error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: d }, { conditions: q, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: d }, { endpoint: { url: j, properties: m, headers: m }, type: e }], type: f }, { conditions: [{ [t]: b, [u]: r }], rules: [{ conditions: [{ [t]: "aws.partition", [u]: r, assign: g }], rules: [{ conditions: [k, l], rules: [{ conditions: [{ [t]: c, [u]: [a, n] }, o], rules: [{ endpoint: { url: "https://runtime-v2-lex-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: m, headers: m }, type: e }], type: f }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: d }], type: f }, { conditions: p, rules: [{ conditions: [{ [t]: c, [u]: [n, a] }], rules: [{ endpoint: { url: "https://runtime-v2-lex-fips.{Region}.{PartitionResult#dnsSuffix}", properties: m, headers: m }, type: e }], type: f }, { error: "FIPS is enabled but this partition does not support FIPS", type: d }], type: f }, { conditions: q, rules: [{ conditions: [o], rules: [{ endpoint: { url: "https://runtime-v2-lex.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: m, headers: m }, type: e }], type: f }, { error: "DualStack is enabled but this partition does not support DualStack", type: d }], type: f }, { endpoint: { url: "https://runtime-v2-lex.{Region}.{PartitionResult#dnsSuffix}", properties: m, headers: m }, type: e }], type: f }], type: f }, { error: "Invalid Configuration: Missing Region", type: d }] };
var ruleSet = _data;

// node_modules/@aws-sdk/client-lex-runtime-v2/dist-es/endpoint/endpointResolver.js
var cache = new EndpointCache({
  size: 50,
  params: ["Endpoint", "Region", "UseDualStack", "UseFIPS"]
});
var defaultEndpointResolver = (endpointParams, context = {}) => {
  return cache.get(endpointParams, () => resolveEndpoint(ruleSet, {
    endpointParams,
    logger: context.logger
  }));
};
customEndpointFunctions.aws = awsEndpointFunctions;

// node_modules/@aws-sdk/client-lex-runtime-v2/dist-es/runtimeConfig.shared.js
var getRuntimeConfig = (config) => {
  return {
    apiVersion: "2020-08-07",
    base64Decoder: (config == null ? void 0 : config.base64Decoder) ?? fromBase64,
    base64Encoder: (config == null ? void 0 : config.base64Encoder) ?? toBase64,
    disableHostPrefix: (config == null ? void 0 : config.disableHostPrefix) ?? false,
    endpointProvider: (config == null ? void 0 : config.endpointProvider) ?? defaultEndpointResolver,
    extensions: (config == null ? void 0 : config.extensions) ?? [],
    httpAuthSchemeProvider: (config == null ? void 0 : config.httpAuthSchemeProvider) ?? defaultLexRuntimeV2HttpAuthSchemeProvider,
    httpAuthSchemes: (config == null ? void 0 : config.httpAuthSchemes) ?? [
      {
        schemeId: "aws.auth#sigv4",
        identityProvider: (ipc) => ipc.getIdentityProvider("aws.auth#sigv4"),
        signer: new AwsSdkSigV4Signer()
      }
    ],
    logger: (config == null ? void 0 : config.logger) ?? new NoOpLogger(),
    sdkStreamMixin: (config == null ? void 0 : config.sdkStreamMixin) ?? sdkStreamMixin,
    serviceId: (config == null ? void 0 : config.serviceId) ?? "Lex Runtime V2",
    urlParser: (config == null ? void 0 : config.urlParser) ?? parseUrl,
    utf8Decoder: (config == null ? void 0 : config.utf8Decoder) ?? fromUtf8,
    utf8Encoder: (config == null ? void 0 : config.utf8Encoder) ?? toUtf8
  };
};

// node_modules/@aws-sdk/client-lex-runtime-v2/dist-es/runtimeConfig.browser.js
var getRuntimeConfig2 = (config) => {
  const defaultsMode = resolveDefaultsModeConfig(config);
  const defaultConfigProvider = () => defaultsMode().then(loadConfigsForDefaultMode);
  const clientSharedValues = getRuntimeConfig(config);
  return {
    ...clientSharedValues,
    ...config,
    runtime: "browser",
    defaultsMode,
    bodyLengthChecker: (config == null ? void 0 : config.bodyLengthChecker) ?? calculateBodyLength,
    credentialDefaultProvider: (config == null ? void 0 : config.credentialDefaultProvider) ?? ((_) => () => Promise.reject(new Error("Credential is missing"))),
    defaultUserAgentProvider: (config == null ? void 0 : config.defaultUserAgentProvider) ?? createDefaultUserAgentProvider({ serviceId: clientSharedValues.serviceId, clientVersion: package_default.version }),
    eventStreamPayloadHandlerProvider: (config == null ? void 0 : config.eventStreamPayloadHandlerProvider) ?? (() => ({ handle: invalidFunction("event stream request is not supported in browser.") })),
    eventStreamSerdeProvider: (config == null ? void 0 : config.eventStreamSerdeProvider) ?? eventStreamSerdeProvider,
    maxAttempts: (config == null ? void 0 : config.maxAttempts) ?? DEFAULT_MAX_ATTEMPTS,
    region: (config == null ? void 0 : config.region) ?? invalidProvider("Region is missing"),
    requestHandler: FetchHttpHandler.create((config == null ? void 0 : config.requestHandler) ?? defaultConfigProvider),
    retryMode: (config == null ? void 0 : config.retryMode) ?? (async () => (await defaultConfigProvider()).retryMode || DEFAULT_RETRY_MODE),
    sha256: (config == null ? void 0 : config.sha256) ?? Sha256,
    streamCollector: (config == null ? void 0 : config.streamCollector) ?? streamCollector,
    useDualstackEndpoint: (config == null ? void 0 : config.useDualstackEndpoint) ?? (() => Promise.resolve(DEFAULT_USE_DUALSTACK_ENDPOINT)),
    useFipsEndpoint: (config == null ? void 0 : config.useFipsEndpoint) ?? (() => Promise.resolve(DEFAULT_USE_FIPS_ENDPOINT))
  };
};

// node_modules/@aws-sdk/client-lex-runtime-v2/dist-es/auth/httpAuthExtensionConfiguration.js
var getHttpAuthExtensionConfiguration = (runtimeConfig) => {
  const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
  let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
  let _credentials = runtimeConfig.credentials;
  return {
    setHttpAuthScheme(httpAuthScheme) {
      const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
      if (index === -1) {
        _httpAuthSchemes.push(httpAuthScheme);
      } else {
        _httpAuthSchemes.splice(index, 1, httpAuthScheme);
      }
    },
    httpAuthSchemes() {
      return _httpAuthSchemes;
    },
    setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
      _httpAuthSchemeProvider = httpAuthSchemeProvider;
    },
    httpAuthSchemeProvider() {
      return _httpAuthSchemeProvider;
    },
    setCredentials(credentials) {
      _credentials = credentials;
    },
    credentials() {
      return _credentials;
    }
  };
};
var resolveHttpAuthRuntimeConfig = (config) => {
  return {
    httpAuthSchemes: config.httpAuthSchemes(),
    httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
    credentials: config.credentials()
  };
};

// node_modules/@aws-sdk/client-lex-runtime-v2/dist-es/runtimeExtensions.js
var resolveRuntimeExtensions = (runtimeConfig, extensions) => {
  const extensionConfiguration = Object.assign(getAwsRegionExtensionConfiguration(runtimeConfig), getDefaultExtensionConfiguration(runtimeConfig), getHttpHandlerExtensionConfiguration(runtimeConfig), getHttpAuthExtensionConfiguration(runtimeConfig));
  extensions.forEach((extension) => extension.configure(extensionConfiguration));
  return Object.assign(runtimeConfig, resolveAwsRegionExtensionConfiguration(extensionConfiguration), resolveDefaultRuntimeConfig(extensionConfiguration), resolveHttpHandlerRuntimeConfig(extensionConfiguration), resolveHttpAuthRuntimeConfig(extensionConfiguration));
};

// node_modules/@aws-sdk/client-lex-runtime-v2/dist-es/LexRuntimeV2Client.js
var LexRuntimeV2Client = class extends Client {
  constructor(...[configuration]) {
    const _config_0 = getRuntimeConfig2(configuration || {});
    super(_config_0);
    __publicField(this, "config");
    this.initConfig = _config_0;
    const _config_1 = resolveClientEndpointParameters(_config_0);
    const _config_2 = resolveUserAgentConfig(_config_1);
    const _config_3 = resolveRetryConfig(_config_2);
    const _config_4 = resolveRegionConfig(_config_3);
    const _config_5 = resolveHostHeaderConfig(_config_4);
    const _config_6 = resolveEndpointConfig(_config_5);
    const _config_7 = resolveEventStreamSerdeConfig(_config_6);
    const _config_8 = resolveHttpAuthSchemeConfig(_config_7);
    const _config_9 = resolveEventStreamConfig(_config_8);
    const _config_10 = resolveRuntimeExtensions(_config_9, (configuration == null ? void 0 : configuration.extensions) || []);
    this.config = _config_10;
    this.middlewareStack.use(getUserAgentPlugin(this.config));
    this.middlewareStack.use(getRetryPlugin(this.config));
    this.middlewareStack.use(getContentLengthPlugin(this.config));
    this.middlewareStack.use(getHostHeaderPlugin(this.config));
    this.middlewareStack.use(getLoggerPlugin(this.config));
    this.middlewareStack.use(getRecursionDetectionPlugin(this.config));
    this.middlewareStack.use(getHttpAuthSchemeEndpointRuleSetPlugin(this.config, {
      httpAuthSchemeParametersProvider: defaultLexRuntimeV2HttpAuthSchemeParametersProvider,
      identityProviderConfigProvider: async (config) => new DefaultIdentityProviderConfig({
        "aws.auth#sigv4": config.credentials
      })
    }));
    this.middlewareStack.use(getHttpSigningPlugin(this.config));
  }
  destroy() {
    super.destroy();
  }
};

// node_modules/@aws-sdk/client-lex-runtime-v2/dist-es/models/LexRuntimeV2ServiceException.js
var LexRuntimeV2ServiceException = class _LexRuntimeV2ServiceException extends ServiceException {
  constructor(options) {
    super(options);
    Object.setPrototypeOf(this, _LexRuntimeV2ServiceException.prototype);
  }
};

// node_modules/@aws-sdk/client-lex-runtime-v2/dist-es/models/models_0.js
var AccessDeniedException = class _AccessDeniedException extends LexRuntimeV2ServiceException {
  constructor(opts) {
    super({
      name: "AccessDeniedException",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "AccessDeniedException");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _AccessDeniedException.prototype);
  }
};
var ConflictException = class _ConflictException extends LexRuntimeV2ServiceException {
  constructor(opts) {
    super({
      name: "ConflictException",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "ConflictException");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _ConflictException.prototype);
  }
};
var InternalServerException = class _InternalServerException extends LexRuntimeV2ServiceException {
  constructor(opts) {
    super({
      name: "InternalServerException",
      $fault: "server",
      ...opts
    });
    __publicField(this, "name", "InternalServerException");
    __publicField(this, "$fault", "server");
    Object.setPrototypeOf(this, _InternalServerException.prototype);
  }
};
var ResourceNotFoundException = class _ResourceNotFoundException extends LexRuntimeV2ServiceException {
  constructor(opts) {
    super({
      name: "ResourceNotFoundException",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "ResourceNotFoundException");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _ResourceNotFoundException.prototype);
  }
};
var ThrottlingException = class _ThrottlingException extends LexRuntimeV2ServiceException {
  constructor(opts) {
    super({
      name: "ThrottlingException",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "ThrottlingException");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _ThrottlingException.prototype);
  }
};
var ValidationException = class _ValidationException extends LexRuntimeV2ServiceException {
  constructor(opts) {
    super({
      name: "ValidationException",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "ValidationException");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _ValidationException.prototype);
  }
};
var ConfirmationState = {
  CONFIRMED: "Confirmed",
  DENIED: "Denied",
  NONE: "None"
};
var Shape = {
  COMPOSITE: "Composite",
  LIST: "List",
  SCALAR: "Scalar"
};
var IntentState = {
  FAILED: "Failed",
  FULFILLED: "Fulfilled",
  FULFILLMENT_IN_PROGRESS: "FulfillmentInProgress",
  IN_PROGRESS: "InProgress",
  READY_FOR_FULFILLMENT: "ReadyForFulfillment",
  WAITING: "Waiting"
};
var InterpretationSource = {
  BEDROCK: "Bedrock",
  LEX: "Lex"
};
var SentimentType = {
  MIXED: "MIXED",
  NEGATIVE: "NEGATIVE",
  NEUTRAL: "NEUTRAL",
  POSITIVE: "POSITIVE"
};
var MessageContentType = {
  CUSTOM_PAYLOAD: "CustomPayload",
  IMAGE_RESPONSE_CARD: "ImageResponseCard",
  PLAIN_TEXT: "PlainText",
  SSML: "SSML"
};
var StyleType = {
  DEFAULT: "Default",
  SPELL_BY_LETTER: "SpellByLetter",
  SPELL_BY_WORD: "SpellByWord"
};
var DialogActionType = {
  CLOSE: "Close",
  CONFIRM_INTENT: "ConfirmIntent",
  DELEGATE: "Delegate",
  ELICIT_INTENT: "ElicitIntent",
  ELICIT_SLOT: "ElicitSlot",
  NONE: "None"
};
var BadGatewayException = class _BadGatewayException extends LexRuntimeV2ServiceException {
  constructor(opts) {
    super({
      name: "BadGatewayException",
      $fault: "server",
      ...opts
    });
    __publicField(this, "name", "BadGatewayException");
    __publicField(this, "$fault", "server");
    Object.setPrototypeOf(this, _BadGatewayException.prototype);
  }
};
var DependencyFailedException = class _DependencyFailedException extends LexRuntimeV2ServiceException {
  constructor(opts) {
    super({
      name: "DependencyFailedException",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "DependencyFailedException");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _DependencyFailedException.prototype);
  }
};
var ConversationMode = {
  AUDIO: "AUDIO",
  TEXT: "TEXT"
};
var InputMode = {
  DTMF: "DTMF",
  SPEECH: "Speech",
  TEXT: "Text"
};
var PlaybackInterruptionReason = {
  DTMF_START_DETECTED: "DTMF_START_DETECTED",
  TEXT_DETECTED: "TEXT_DETECTED",
  VOICE_START_DETECTED: "VOICE_START_DETECTED"
};
var StartConversationRequestEventStream;
(function(StartConversationRequestEventStream2) {
  StartConversationRequestEventStream2.visit = (value, visitor) => {
    if (value.ConfigurationEvent !== void 0)
      return visitor.ConfigurationEvent(value.ConfigurationEvent);
    if (value.AudioInputEvent !== void 0)
      return visitor.AudioInputEvent(value.AudioInputEvent);
    if (value.DTMFInputEvent !== void 0)
      return visitor.DTMFInputEvent(value.DTMFInputEvent);
    if (value.TextInputEvent !== void 0)
      return visitor.TextInputEvent(value.TextInputEvent);
    if (value.PlaybackCompletionEvent !== void 0)
      return visitor.PlaybackCompletionEvent(value.PlaybackCompletionEvent);
    if (value.DisconnectionEvent !== void 0)
      return visitor.DisconnectionEvent(value.DisconnectionEvent);
    return visitor._(value.$unknown[0], value.$unknown[1]);
  };
})(StartConversationRequestEventStream || (StartConversationRequestEventStream = {}));
var StartConversationResponseEventStream;
(function(StartConversationResponseEventStream2) {
  StartConversationResponseEventStream2.visit = (value, visitor) => {
    if (value.PlaybackInterruptionEvent !== void 0)
      return visitor.PlaybackInterruptionEvent(value.PlaybackInterruptionEvent);
    if (value.TranscriptEvent !== void 0)
      return visitor.TranscriptEvent(value.TranscriptEvent);
    if (value.IntentResultEvent !== void 0)
      return visitor.IntentResultEvent(value.IntentResultEvent);
    if (value.TextResponseEvent !== void 0)
      return visitor.TextResponseEvent(value.TextResponseEvent);
    if (value.AudioResponseEvent !== void 0)
      return visitor.AudioResponseEvent(value.AudioResponseEvent);
    if (value.HeartbeatEvent !== void 0)
      return visitor.HeartbeatEvent(value.HeartbeatEvent);
    if (value.AccessDeniedException !== void 0)
      return visitor.AccessDeniedException(value.AccessDeniedException);
    if (value.ResourceNotFoundException !== void 0)
      return visitor.ResourceNotFoundException(value.ResourceNotFoundException);
    if (value.ValidationException !== void 0)
      return visitor.ValidationException(value.ValidationException);
    if (value.ThrottlingException !== void 0)
      return visitor.ThrottlingException(value.ThrottlingException);
    if (value.InternalServerException !== void 0)
      return visitor.InternalServerException(value.InternalServerException);
    if (value.ConflictException !== void 0)
      return visitor.ConflictException(value.ConflictException);
    if (value.DependencyFailedException !== void 0)
      return visitor.DependencyFailedException(value.DependencyFailedException);
    if (value.BadGatewayException !== void 0)
      return visitor.BadGatewayException(value.BadGatewayException);
    return visitor._(value.$unknown[0], value.$unknown[1]);
  };
})(StartConversationResponseEventStream || (StartConversationResponseEventStream = {}));
var ActiveContextFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.contextAttributes && { contextAttributes: SENSITIVE_STRING }
});
var MessageFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.content && { content: SENSITIVE_STRING }
});
var PutSessionResponseFilterSensitiveLog = (obj) => ({
  ...obj
});
var RecognizeUtteranceRequestFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.sessionState && { sessionState: SENSITIVE_STRING },
  ...obj.requestAttributes && { requestAttributes: SENSITIVE_STRING }
});
var RecognizeUtteranceResponseFilterSensitiveLog = (obj) => ({
  ...obj
});
var DTMFInputEventFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.inputCharacter && { inputCharacter: SENSITIVE_STRING }
});
var TextInputEventFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.text && { text: SENSITIVE_STRING }
});
var TextResponseEventFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.messages && { messages: obj.messages.map((item) => MessageFilterSensitiveLog(item)) }
});
var SessionStateFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.activeContexts && {
    activeContexts: obj.activeContexts.map((item) => ActiveContextFilterSensitiveLog(item))
  }
});
var ConfigurationEventFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.welcomeMessages && { welcomeMessages: obj.welcomeMessages.map((item) => MessageFilterSensitiveLog(item)) }
});
var PutSessionRequestFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.messages && { messages: obj.messages.map((item) => MessageFilterSensitiveLog(item)) }
});
var RecognizeTextRequestFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.text && { text: SENSITIVE_STRING }
});
var StartConversationRequestEventStreamFilterSensitiveLog = (obj) => {
  if (obj.ConfigurationEvent !== void 0)
    return { ConfigurationEvent: ConfigurationEventFilterSensitiveLog(obj.ConfigurationEvent) };
  if (obj.AudioInputEvent !== void 0)
    return { AudioInputEvent: obj.AudioInputEvent };
  if (obj.DTMFInputEvent !== void 0)
    return { DTMFInputEvent: DTMFInputEventFilterSensitiveLog(obj.DTMFInputEvent) };
  if (obj.TextInputEvent !== void 0)
    return { TextInputEvent: TextInputEventFilterSensitiveLog(obj.TextInputEvent) };
  if (obj.PlaybackCompletionEvent !== void 0)
    return { PlaybackCompletionEvent: obj.PlaybackCompletionEvent };
  if (obj.DisconnectionEvent !== void 0)
    return { DisconnectionEvent: obj.DisconnectionEvent };
  if (obj.$unknown !== void 0)
    return { [obj.$unknown[0]]: "UNKNOWN" };
};
var StartConversationRequestFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.requestEventStream && { requestEventStream: "STREAMING_CONTENT" }
});
var GetSessionResponseFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.messages && { messages: obj.messages.map((item) => MessageFilterSensitiveLog(item)) }
});
var IntentResultEventFilterSensitiveLog = (obj) => ({
  ...obj
});
var RecognizeTextResponseFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.messages && { messages: obj.messages.map((item) => MessageFilterSensitiveLog(item)) }
});
var StartConversationResponseEventStreamFilterSensitiveLog = (obj) => {
  if (obj.PlaybackInterruptionEvent !== void 0)
    return { PlaybackInterruptionEvent: obj.PlaybackInterruptionEvent };
  if (obj.TranscriptEvent !== void 0)
    return { TranscriptEvent: obj.TranscriptEvent };
  if (obj.IntentResultEvent !== void 0)
    return { IntentResultEvent: IntentResultEventFilterSensitiveLog(obj.IntentResultEvent) };
  if (obj.TextResponseEvent !== void 0)
    return { TextResponseEvent: TextResponseEventFilterSensitiveLog(obj.TextResponseEvent) };
  if (obj.AudioResponseEvent !== void 0)
    return { AudioResponseEvent: obj.AudioResponseEvent };
  if (obj.HeartbeatEvent !== void 0)
    return { HeartbeatEvent: obj.HeartbeatEvent };
  if (obj.AccessDeniedException !== void 0)
    return { AccessDeniedException: obj.AccessDeniedException };
  if (obj.ResourceNotFoundException !== void 0)
    return { ResourceNotFoundException: obj.ResourceNotFoundException };
  if (obj.ValidationException !== void 0)
    return { ValidationException: obj.ValidationException };
  if (obj.ThrottlingException !== void 0)
    return { ThrottlingException: obj.ThrottlingException };
  if (obj.InternalServerException !== void 0)
    return { InternalServerException: obj.InternalServerException };
  if (obj.ConflictException !== void 0)
    return { ConflictException: obj.ConflictException };
  if (obj.DependencyFailedException !== void 0)
    return { DependencyFailedException: obj.DependencyFailedException };
  if (obj.BadGatewayException !== void 0)
    return { BadGatewayException: obj.BadGatewayException };
  if (obj.$unknown !== void 0)
    return { [obj.$unknown[0]]: "UNKNOWN" };
};
var StartConversationResponseFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.responseEventStream && { responseEventStream: "STREAMING_CONTENT" }
});

// node_modules/@aws-sdk/client-lex-runtime-v2/dist-es/protocols/Aws_restJson1.js
var se_DeleteSessionCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/bots/{botId}/botAliases/{botAliasId}/botLocales/{localeId}/sessions/{sessionId}");
  b2.p("botId", () => input.botId, "{botId}", false);
  b2.p("botAliasId", () => input.botAliasId, "{botAliasId}", false);
  b2.p("localeId", () => input.localeId, "{localeId}", false);
  b2.p("sessionId", () => input.sessionId, "{sessionId}", false);
  let body;
  b2.m("DELETE").h(headers).b(body);
  return b2.build();
};
var se_GetSessionCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/bots/{botId}/botAliases/{botAliasId}/botLocales/{localeId}/sessions/{sessionId}");
  b2.p("botId", () => input.botId, "{botId}", false);
  b2.p("botAliasId", () => input.botAliasId, "{botAliasId}", false);
  b2.p("localeId", () => input.localeId, "{localeId}", false);
  b2.p("sessionId", () => input.sessionId, "{sessionId}", false);
  let body;
  b2.m("GET").h(headers).b(body);
  return b2.build();
};
var se_PutSessionCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = map({}, isSerializableHeaderValue, {
    "content-type": "application/json",
    [_r]: input[_rCT]
  });
  b2.bp("/bots/{botId}/botAliases/{botAliasId}/botLocales/{localeId}/sessions/{sessionId}");
  b2.p("botId", () => input.botId, "{botId}", false);
  b2.p("botAliasId", () => input.botAliasId, "{botAliasId}", false);
  b2.p("localeId", () => input.localeId, "{localeId}", false);
  b2.p("sessionId", () => input.sessionId, "{sessionId}", false);
  let body;
  body = JSON.stringify(take(input, {
    messages: (_) => _json(_),
    requestAttributes: (_) => _json(_),
    sessionState: (_) => se_SessionState(_, context)
  }));
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_RecognizeTextCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b2.bp("/bots/{botId}/botAliases/{botAliasId}/botLocales/{localeId}/sessions/{sessionId}/text");
  b2.p("botId", () => input.botId, "{botId}", false);
  b2.p("botAliasId", () => input.botAliasId, "{botAliasId}", false);
  b2.p("localeId", () => input.localeId, "{localeId}", false);
  b2.p("sessionId", () => input.sessionId, "{sessionId}", false);
  let body;
  body = JSON.stringify(take(input, {
    requestAttributes: (_) => _json(_),
    sessionState: (_) => se_SessionState(_, context),
    text: []
  }));
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_RecognizeUtteranceCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = map({}, isSerializableHeaderValue, {
    "x-amz-content-sha256": "UNSIGNED-PAYLOAD",
    [_ct]: input[_rCTe] || "application/octet-stream",
    [_xalss]: input[_sS],
    [_xalra]: input[_rA],
    [_rct]: input[_rCT]
  });
  b2.bp("/bots/{botId}/botAliases/{botAliasId}/botLocales/{localeId}/sessions/{sessionId}/utterance");
  b2.p("botId", () => input.botId, "{botId}", false);
  b2.p("botAliasId", () => input.botAliasId, "{botAliasId}", false);
  b2.p("localeId", () => input.localeId, "{localeId}", false);
  b2.p("sessionId", () => input.sessionId, "{sessionId}", false);
  let body;
  if (input.inputStream !== void 0) {
    body = input.inputStream;
  }
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_StartConversationCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = map({}, isSerializableHeaderValue, {
    "content-type": "application/json",
    [_xalcm]: input[_cM]
  });
  b2.bp("/bots/{botId}/botAliases/{botAliasId}/botLocales/{localeId}/sessions/{sessionId}/conversation");
  b2.p("botId", () => input.botId, "{botId}", false);
  b2.p("botAliasId", () => input.botAliasId, "{botAliasId}", false);
  b2.p("localeId", () => input.localeId, "{localeId}", false);
  b2.p("sessionId", () => input.sessionId, "{sessionId}", false);
  let body;
  if (input.requestEventStream !== void 0) {
    body = se_StartConversationRequestEventStream(input.requestEventStream, context);
  }
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var de_DeleteSessionCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseJsonBody(output.body, context)), "body");
  const doc = take(data, {
    botAliasId: expectString,
    botId: expectString,
    localeId: expectString,
    sessionId: expectString
  });
  Object.assign(contents, doc);
  return contents;
};
var de_GetSessionCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseJsonBody(output.body, context)), "body");
  const doc = take(data, {
    interpretations: (_) => de_Interpretations(_, context),
    messages: _json,
    sessionId: expectString,
    sessionState: (_) => de_SessionState(_, context)
  });
  Object.assign(contents, doc);
  return contents;
};
var de_PutSessionCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_cT]: [, output.headers[_ct]],
    [_m]: [, output.headers[_xalm]],
    [_sS]: [, output.headers[_xalss]],
    [_rA]: [, output.headers[_xalra]],
    [_sI]: [, output.headers[_xalsi]]
  });
  const data = output.body;
  context.sdkStreamMixin(data);
  contents.audioStream = data;
  return contents;
};
var de_RecognizeTextCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseJsonBody(output.body, context)), "body");
  const doc = take(data, {
    interpretations: (_) => de_Interpretations(_, context),
    messages: _json,
    recognizedBotMember: _json,
    requestAttributes: _json,
    sessionId: expectString,
    sessionState: (_) => de_SessionState(_, context)
  });
  Object.assign(contents, doc);
  return contents;
};
var de_RecognizeUtteranceCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_iM]: [, output.headers[_xalim]],
    [_cT]: [, output.headers[_ct]],
    [_m]: [, output.headers[_xalm]],
    [_i]: [, output.headers[_xali]],
    [_sS]: [, output.headers[_xalss]],
    [_rA]: [, output.headers[_xalra]],
    [_sI]: [, output.headers[_xalsi]],
    [_iT]: [, output.headers[_xalit]],
    [_rBM]: [, output.headers[_xalrbm]]
  });
  const data = output.body;
  context.sdkStreamMixin(data);
  contents.audioStream = data;
  return contents;
};
var de_StartConversationCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = output.body;
  contents.responseEventStream = de_StartConversationResponseEventStream(data, context);
  return contents;
};
var de_CommandError = async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseJsonErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.lexruntimev2#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "ConflictException":
    case "com.amazonaws.lexruntimev2#ConflictException":
      throw await de_ConflictExceptionRes(parsedOutput, context);
    case "InternalServerException":
    case "com.amazonaws.lexruntimev2#InternalServerException":
      throw await de_InternalServerExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.lexruntimev2#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.lexruntimev2#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "ValidationException":
    case "com.amazonaws.lexruntimev2#ValidationException":
      throw await de_ValidationExceptionRes(parsedOutput, context);
    case "BadGatewayException":
    case "com.amazonaws.lexruntimev2#BadGatewayException":
      throw await de_BadGatewayExceptionRes(parsedOutput, context);
    case "DependencyFailedException":
    case "com.amazonaws.lexruntimev2#DependencyFailedException":
      throw await de_DependencyFailedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
};
var throwDefaultError = withBaseException(LexRuntimeV2ServiceException);
var de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body;
  const doc = take(data, {
    message: expectString
  });
  Object.assign(contents, doc);
  const exception = new AccessDeniedException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body);
};
var de_BadGatewayExceptionRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body;
  const doc = take(data, {
    message: expectString
  });
  Object.assign(contents, doc);
  const exception = new BadGatewayException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body);
};
var de_ConflictExceptionRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body;
  const doc = take(data, {
    message: expectString
  });
  Object.assign(contents, doc);
  const exception = new ConflictException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body);
};
var de_DependencyFailedExceptionRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body;
  const doc = take(data, {
    message: expectString
  });
  Object.assign(contents, doc);
  const exception = new DependencyFailedException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body);
};
var de_InternalServerExceptionRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body;
  const doc = take(data, {
    message: expectString
  });
  Object.assign(contents, doc);
  const exception = new InternalServerException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body);
};
var de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body;
  const doc = take(data, {
    message: expectString
  });
  Object.assign(contents, doc);
  const exception = new ResourceNotFoundException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body);
};
var de_ThrottlingExceptionRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body;
  const doc = take(data, {
    message: expectString
  });
  Object.assign(contents, doc);
  const exception = new ThrottlingException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body);
};
var de_ValidationExceptionRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body;
  const doc = take(data, {
    message: expectString
  });
  Object.assign(contents, doc);
  const exception = new ValidationException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body);
};
var se_StartConversationRequestEventStream = (input, context) => {
  const eventMarshallingVisitor = (event) => StartConversationRequestEventStream.visit(event, {
    ConfigurationEvent: (value) => se_ConfigurationEvent_event(value, context),
    AudioInputEvent: (value) => se_AudioInputEvent_event(value, context),
    DTMFInputEvent: (value) => se_DTMFInputEvent_event(value, context),
    TextInputEvent: (value) => se_TextInputEvent_event(value, context),
    PlaybackCompletionEvent: (value) => se_PlaybackCompletionEvent_event(value, context),
    DisconnectionEvent: (value) => se_DisconnectionEvent_event(value, context),
    _: (value) => value
  });
  return context.eventStreamMarshaller.serialize(input, eventMarshallingVisitor);
};
var se_AudioInputEvent_event = (input, context) => {
  const headers = {
    ":event-type": { type: "string", value: "AudioInputEvent" },
    ":message-type": { type: "string", value: "event" },
    ":content-type": { type: "string", value: "application/json" }
  };
  let body = new Uint8Array();
  body = se_AudioInputEvent(input, context);
  body = context.utf8Decoder(JSON.stringify(body));
  return { headers, body };
};
var se_ConfigurationEvent_event = (input, context) => {
  const headers = {
    ":event-type": { type: "string", value: "ConfigurationEvent" },
    ":message-type": { type: "string", value: "event" },
    ":content-type": { type: "string", value: "application/json" }
  };
  let body = new Uint8Array();
  body = se_ConfigurationEvent(input, context);
  body = context.utf8Decoder(JSON.stringify(body));
  return { headers, body };
};
var se_DisconnectionEvent_event = (input, context) => {
  const headers = {
    ":event-type": { type: "string", value: "DisconnectionEvent" },
    ":message-type": { type: "string", value: "event" },
    ":content-type": { type: "string", value: "application/json" }
  };
  let body = new Uint8Array();
  body = _json(input);
  body = context.utf8Decoder(JSON.stringify(body));
  return { headers, body };
};
var se_DTMFInputEvent_event = (input, context) => {
  const headers = {
    ":event-type": { type: "string", value: "DTMFInputEvent" },
    ":message-type": { type: "string", value: "event" },
    ":content-type": { type: "string", value: "application/json" }
  };
  let body = new Uint8Array();
  body = _json(input);
  body = context.utf8Decoder(JSON.stringify(body));
  return { headers, body };
};
var se_PlaybackCompletionEvent_event = (input, context) => {
  const headers = {
    ":event-type": { type: "string", value: "PlaybackCompletionEvent" },
    ":message-type": { type: "string", value: "event" },
    ":content-type": { type: "string", value: "application/json" }
  };
  let body = new Uint8Array();
  body = _json(input);
  body = context.utf8Decoder(JSON.stringify(body));
  return { headers, body };
};
var se_TextInputEvent_event = (input, context) => {
  const headers = {
    ":event-type": { type: "string", value: "TextInputEvent" },
    ":message-type": { type: "string", value: "event" },
    ":content-type": { type: "string", value: "application/json" }
  };
  let body = new Uint8Array();
  body = _json(input);
  body = context.utf8Decoder(JSON.stringify(body));
  return { headers, body };
};
var de_StartConversationResponseEventStream = (output, context) => {
  return context.eventStreamMarshaller.deserialize(output, async (event) => {
    if (event["PlaybackInterruptionEvent"] != null) {
      return {
        PlaybackInterruptionEvent: await de_PlaybackInterruptionEvent_event(event["PlaybackInterruptionEvent"], context)
      };
    }
    if (event["TranscriptEvent"] != null) {
      return {
        TranscriptEvent: await de_TranscriptEvent_event(event["TranscriptEvent"], context)
      };
    }
    if (event["IntentResultEvent"] != null) {
      return {
        IntentResultEvent: await de_IntentResultEvent_event(event["IntentResultEvent"], context)
      };
    }
    if (event["TextResponseEvent"] != null) {
      return {
        TextResponseEvent: await de_TextResponseEvent_event(event["TextResponseEvent"], context)
      };
    }
    if (event["AudioResponseEvent"] != null) {
      return {
        AudioResponseEvent: await de_AudioResponseEvent_event(event["AudioResponseEvent"], context)
      };
    }
    if (event["HeartbeatEvent"] != null) {
      return {
        HeartbeatEvent: await de_HeartbeatEvent_event(event["HeartbeatEvent"], context)
      };
    }
    if (event["AccessDeniedException"] != null) {
      return {
        AccessDeniedException: await de_AccessDeniedException_event(event["AccessDeniedException"], context)
      };
    }
    if (event["ResourceNotFoundException"] != null) {
      return {
        ResourceNotFoundException: await de_ResourceNotFoundException_event(event["ResourceNotFoundException"], context)
      };
    }
    if (event["ValidationException"] != null) {
      return {
        ValidationException: await de_ValidationException_event(event["ValidationException"], context)
      };
    }
    if (event["ThrottlingException"] != null) {
      return {
        ThrottlingException: await de_ThrottlingException_event(event["ThrottlingException"], context)
      };
    }
    if (event["InternalServerException"] != null) {
      return {
        InternalServerException: await de_InternalServerException_event(event["InternalServerException"], context)
      };
    }
    if (event["ConflictException"] != null) {
      return {
        ConflictException: await de_ConflictException_event(event["ConflictException"], context)
      };
    }
    if (event["DependencyFailedException"] != null) {
      return {
        DependencyFailedException: await de_DependencyFailedException_event(event["DependencyFailedException"], context)
      };
    }
    if (event["BadGatewayException"] != null) {
      return {
        BadGatewayException: await de_BadGatewayException_event(event["BadGatewayException"], context)
      };
    }
    return { $unknown: event };
  });
};
var de_AccessDeniedException_event = async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseJsonBody(output.body, context)
  };
  return de_AccessDeniedExceptionRes(parsedOutput, context);
};
var de_AudioResponseEvent_event = async (output, context) => {
  const contents = {};
  const data = await parseJsonBody(output.body, context);
  Object.assign(contents, de_AudioResponseEvent(data, context));
  return contents;
};
var de_BadGatewayException_event = async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseJsonBody(output.body, context)
  };
  return de_BadGatewayExceptionRes(parsedOutput, context);
};
var de_ConflictException_event = async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseJsonBody(output.body, context)
  };
  return de_ConflictExceptionRes(parsedOutput, context);
};
var de_DependencyFailedException_event = async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseJsonBody(output.body, context)
  };
  return de_DependencyFailedExceptionRes(parsedOutput, context);
};
var de_HeartbeatEvent_event = async (output, context) => {
  const contents = {};
  const data = await parseJsonBody(output.body, context);
  Object.assign(contents, _json(data));
  return contents;
};
var de_IntentResultEvent_event = async (output, context) => {
  const contents = {};
  const data = await parseJsonBody(output.body, context);
  Object.assign(contents, de_IntentResultEvent(data, context));
  return contents;
};
var de_InternalServerException_event = async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseJsonBody(output.body, context)
  };
  return de_InternalServerExceptionRes(parsedOutput, context);
};
var de_PlaybackInterruptionEvent_event = async (output, context) => {
  const contents = {};
  const data = await parseJsonBody(output.body, context);
  Object.assign(contents, _json(data));
  return contents;
};
var de_ResourceNotFoundException_event = async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseJsonBody(output.body, context)
  };
  return de_ResourceNotFoundExceptionRes(parsedOutput, context);
};
var de_TextResponseEvent_event = async (output, context) => {
  const contents = {};
  const data = await parseJsonBody(output.body, context);
  Object.assign(contents, _json(data));
  return contents;
};
var de_ThrottlingException_event = async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseJsonBody(output.body, context)
  };
  return de_ThrottlingExceptionRes(parsedOutput, context);
};
var de_TranscriptEvent_event = async (output, context) => {
  const contents = {};
  const data = await parseJsonBody(output.body, context);
  Object.assign(contents, _json(data));
  return contents;
};
var de_ValidationException_event = async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseJsonBody(output.body, context)
  };
  return de_ValidationExceptionRes(parsedOutput, context);
};
var se_AudioInputEvent = (input, context) => {
  return take(input, {
    audioChunk: context.base64Encoder,
    clientTimestampMillis: [],
    contentType: [],
    eventId: []
  });
};
var se_ConfigurationEvent = (input, context) => {
  return take(input, {
    clientTimestampMillis: [],
    disablePlayback: [],
    eventId: [],
    requestAttributes: _json,
    responseContentType: [],
    sessionState: (_) => se_SessionState(_, context),
    welcomeMessages: _json
  });
};
var se_DialogAction = (input, context) => {
  return take(input, {
    slotElicitationStyle: [],
    slotToElicit: [],
    subSlotToElicit: (_) => se_ElicitSubSlot(_, context),
    type: []
  });
};
var se_ElicitSubSlot = (input, context) => {
  return take(input, {
    name: [],
    subSlotToElicit: (_) => se_ElicitSubSlot(_, context)
  });
};
var se_Intent = (input, context) => {
  return take(input, {
    confirmationState: [],
    name: [],
    slots: (_) => se_Slots(_, context),
    state: []
  });
};
var se_RuntimeHintDetails = (input, context) => {
  return take(input, {
    runtimeHintValues: _json,
    subSlotHints: (_) => se_SlotHintsSlotMap(_, context)
  });
};
var se_RuntimeHints = (input, context) => {
  return take(input, {
    slotHints: (_) => se_SlotHintsIntentMap(_, context)
  });
};
var se_SessionState = (input, context) => {
  return take(input, {
    activeContexts: _json,
    dialogAction: (_) => se_DialogAction(_, context),
    intent: (_) => se_Intent(_, context),
    originatingRequestId: [],
    runtimeHints: (_) => se_RuntimeHints(_, context),
    sessionAttributes: _json
  });
};
var se_Slot = (input, context) => {
  return take(input, {
    shape: [],
    subSlots: (_) => se_Slots(_, context),
    value: _json,
    values: (_) => se_Values(_, context)
  });
};
var se_SlotHintsIntentMap = (input, context) => {
  return Object.entries(input).reduce((acc, [key, value]) => {
    if (value === null) {
      return acc;
    }
    acc[key] = se_SlotHintsSlotMap(value, context);
    return acc;
  }, {});
};
var se_SlotHintsSlotMap = (input, context) => {
  return Object.entries(input).reduce((acc, [key, value]) => {
    if (value === null) {
      return acc;
    }
    acc[key] = se_RuntimeHintDetails(value, context);
    return acc;
  }, {});
};
var se_Slots = (input, context) => {
  return Object.entries(input).reduce((acc, [key, value]) => {
    if (value === null) {
      return acc;
    }
    acc[key] = se_Slot(value, context);
    return acc;
  }, {});
};
var se_Values = (input, context) => {
  return input.filter((e2) => e2 != null).map((entry) => {
    return se_Slot(entry, context);
  });
};
var de_AudioResponseEvent = (output, context) => {
  return take(output, {
    audioChunk: context.base64Decoder,
    contentType: expectString,
    eventId: expectString
  });
};
var de_ConfidenceScore = (output, context) => {
  return take(output, {
    score: limitedParseDouble
  });
};
var de_DialogAction = (output, context) => {
  return take(output, {
    slotElicitationStyle: expectString,
    slotToElicit: expectString,
    subSlotToElicit: (_) => de_ElicitSubSlot(_, context),
    type: expectString
  });
};
var de_ElicitSubSlot = (output, context) => {
  return take(output, {
    name: expectString,
    subSlotToElicit: (_) => de_ElicitSubSlot(_, context)
  });
};
var de_Intent = (output, context) => {
  return take(output, {
    confirmationState: expectString,
    name: expectString,
    slots: (_) => de_Slots(_, context),
    state: expectString
  });
};
var de_IntentResultEvent = (output, context) => {
  return take(output, {
    eventId: expectString,
    inputMode: expectString,
    interpretations: (_) => de_Interpretations(_, context),
    recognizedBotMember: _json,
    requestAttributes: _json,
    sessionId: expectString,
    sessionState: (_) => de_SessionState(_, context)
  });
};
var de_Interpretation = (output, context) => {
  return take(output, {
    intent: (_) => de_Intent(_, context),
    interpretationSource: expectString,
    nluConfidence: (_) => de_ConfidenceScore(_, context),
    sentimentResponse: (_) => de_SentimentResponse(_, context)
  });
};
var de_Interpretations = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_Interpretation(entry, context);
  });
  return retVal;
};
var de_RuntimeHintDetails = (output, context) => {
  return take(output, {
    runtimeHintValues: _json,
    subSlotHints: (_) => de_SlotHintsSlotMap(_, context)
  });
};
var de_RuntimeHints = (output, context) => {
  return take(output, {
    slotHints: (_) => de_SlotHintsIntentMap(_, context)
  });
};
var de_SentimentResponse = (output, context) => {
  return take(output, {
    sentiment: expectString,
    sentimentScore: (_) => de_SentimentScore(_, context)
  });
};
var de_SentimentScore = (output, context) => {
  return take(output, {
    mixed: limitedParseDouble,
    negative: limitedParseDouble,
    neutral: limitedParseDouble,
    positive: limitedParseDouble
  });
};
var de_SessionState = (output, context) => {
  return take(output, {
    activeContexts: _json,
    dialogAction: (_) => de_DialogAction(_, context),
    intent: (_) => de_Intent(_, context),
    originatingRequestId: expectString,
    runtimeHints: (_) => de_RuntimeHints(_, context),
    sessionAttributes: _json
  });
};
var de_Slot = (output, context) => {
  return take(output, {
    shape: expectString,
    subSlots: (_) => de_Slots(_, context),
    value: _json,
    values: (_) => de_Values(_, context)
  });
};
var de_SlotHintsIntentMap = (output, context) => {
  return Object.entries(output).reduce((acc, [key, value]) => {
    if (value === null) {
      return acc;
    }
    acc[key] = de_SlotHintsSlotMap(value, context);
    return acc;
  }, {});
};
var de_SlotHintsSlotMap = (output, context) => {
  return Object.entries(output).reduce((acc, [key, value]) => {
    if (value === null) {
      return acc;
    }
    acc[key] = de_RuntimeHintDetails(value, context);
    return acc;
  }, {});
};
var de_Slots = (output, context) => {
  return Object.entries(output).reduce((acc, [key, value]) => {
    if (value === null) {
      return acc;
    }
    acc[key] = de_Slot(value, context);
    return acc;
  }, {});
};
var de_Values = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_Slot(entry, context);
  });
  return retVal;
};
var deserializeMetadata = (output) => ({
  httpStatusCode: output.statusCode,
  requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
  extendedRequestId: output.headers["x-amz-id-2"],
  cfId: output.headers["x-amz-cf-id"]
});
var _cM = "conversationMode";
var _cT = "contentType";
var _ct = "content-type";
var _i = "interpretations";
var _iM = "inputMode";
var _iT = "inputTranscript";
var _m = "messages";
var _r = "responsecontenttype";
var _rA = "requestAttributes";
var _rBM = "recognizedBotMember";
var _rCT = "responseContentType";
var _rCTe = "requestContentType";
var _rct = "response-content-type";
var _sI = "sessionId";
var _sS = "sessionState";
var _xalcm = "x-amz-lex-conversation-mode";
var _xali = "x-amz-lex-interpretations";
var _xalim = "x-amz-lex-input-mode";
var _xalit = "x-amz-lex-input-transcript";
var _xalm = "x-amz-lex-messages";
var _xalra = "x-amz-lex-request-attributes";
var _xalrbm = "x-amz-lex-recognized-bot-member";
var _xalsi = "x-amz-lex-session-id";
var _xalss = "x-amz-lex-session-state";

// node_modules/@aws-sdk/client-lex-runtime-v2/dist-es/commands/DeleteSessionCommand.js
var DeleteSessionCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSDeepSenseRunTimeServiceApi2_0", "DeleteSession", {}).n("LexRuntimeV2Client", "DeleteSessionCommand").f(void 0, void 0).ser(se_DeleteSessionCommand).de(de_DeleteSessionCommand).build() {
};

// node_modules/@aws-sdk/client-lex-runtime-v2/dist-es/commands/GetSessionCommand.js
var GetSessionCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSDeepSenseRunTimeServiceApi2_0", "GetSession", {}).n("LexRuntimeV2Client", "GetSessionCommand").f(void 0, GetSessionResponseFilterSensitiveLog).ser(se_GetSessionCommand).de(de_GetSessionCommand).build() {
};

// node_modules/@aws-sdk/client-lex-runtime-v2/dist-es/commands/PutSessionCommand.js
var PutSessionCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSDeepSenseRunTimeServiceApi2_0", "PutSession", {}).n("LexRuntimeV2Client", "PutSessionCommand").f(PutSessionRequestFilterSensitiveLog, PutSessionResponseFilterSensitiveLog).ser(se_PutSessionCommand).de(de_PutSessionCommand).build() {
};

// node_modules/@aws-sdk/client-lex-runtime-v2/dist-es/commands/RecognizeTextCommand.js
var RecognizeTextCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSDeepSenseRunTimeServiceApi2_0", "RecognizeText", {}).n("LexRuntimeV2Client", "RecognizeTextCommand").f(RecognizeTextRequestFilterSensitiveLog, RecognizeTextResponseFilterSensitiveLog).ser(se_RecognizeTextCommand).de(de_RecognizeTextCommand).build() {
};

// node_modules/@aws-sdk/client-lex-runtime-v2/dist-es/commands/RecognizeUtteranceCommand.js
var RecognizeUtteranceCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSDeepSenseRunTimeServiceApi2_0", "RecognizeUtterance", {}).n("LexRuntimeV2Client", "RecognizeUtteranceCommand").f(RecognizeUtteranceRequestFilterSensitiveLog, RecognizeUtteranceResponseFilterSensitiveLog).ser(se_RecognizeUtteranceCommand).de(de_RecognizeUtteranceCommand).build() {
};

// node_modules/@aws-sdk/client-lex-runtime-v2/dist-es/commands/StartConversationCommand.js
var StartConversationCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions()),
    getEventStreamPlugin(config)
  ];
}).s("AWSDeepSenseRunTimeServiceApi2_0", "StartConversation", {
  eventStream: {
    input: true,
    output: true
  }
}).n("LexRuntimeV2Client", "StartConversationCommand").f(StartConversationRequestFilterSensitiveLog, StartConversationResponseFilterSensitiveLog).ser(se_StartConversationCommand).de(de_StartConversationCommand).build() {
};

// node_modules/@aws-sdk/client-lex-runtime-v2/dist-es/LexRuntimeV2.js
var commands = {
  DeleteSessionCommand,
  GetSessionCommand,
  PutSessionCommand,
  RecognizeTextCommand,
  RecognizeUtteranceCommand,
  StartConversationCommand
};
var LexRuntimeV2 = class extends LexRuntimeV2Client {
};
createAggregatedClient(commands, LexRuntimeV2);
export {
  Command as $Command,
  AccessDeniedException,
  ActiveContextFilterSensitiveLog,
  BadGatewayException,
  ConfigurationEventFilterSensitiveLog,
  ConfirmationState,
  ConflictException,
  ConversationMode,
  DTMFInputEventFilterSensitiveLog,
  DeleteSessionCommand,
  DependencyFailedException,
  DialogActionType,
  GetSessionCommand,
  GetSessionResponseFilterSensitiveLog,
  InputMode,
  IntentResultEventFilterSensitiveLog,
  IntentState,
  InternalServerException,
  InterpretationSource,
  LexRuntimeV2,
  LexRuntimeV2Client,
  LexRuntimeV2ServiceException,
  MessageContentType,
  MessageFilterSensitiveLog,
  PlaybackInterruptionReason,
  PutSessionCommand,
  PutSessionRequestFilterSensitiveLog,
  PutSessionResponseFilterSensitiveLog,
  RecognizeTextCommand,
  RecognizeTextRequestFilterSensitiveLog,
  RecognizeTextResponseFilterSensitiveLog,
  RecognizeUtteranceCommand,
  RecognizeUtteranceRequestFilterSensitiveLog,
  RecognizeUtteranceResponseFilterSensitiveLog,
  ResourceNotFoundException,
  SentimentType,
  SessionStateFilterSensitiveLog,
  Shape,
  StartConversationCommand,
  StartConversationRequestEventStream,
  StartConversationRequestEventStreamFilterSensitiveLog,
  StartConversationRequestFilterSensitiveLog,
  StartConversationResponseEventStream,
  StartConversationResponseEventStreamFilterSensitiveLog,
  StartConversationResponseFilterSensitiveLog,
  StyleType,
  TextInputEventFilterSensitiveLog,
  TextResponseEventFilterSensitiveLog,
  ThrottlingException,
  ValidationException,
  Client as __Client
};
//# sourceMappingURL=@aws-sdk_client-lex-runtime-v2.js.map

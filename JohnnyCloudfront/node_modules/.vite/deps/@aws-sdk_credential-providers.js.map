{
  "version": 3,
  "sources": ["../../@aws-sdk/credential-provider-cognito-identity/dist-es/resolveLogins.js", "../../@aws-sdk/credential-provider-cognito-identity/dist-es/fromCognitoIdentity.js", "../../@aws-sdk/credential-provider-cognito-identity/dist-es/IndexedDbStorage.js", "../../@aws-sdk/credential-provider-cognito-identity/dist-es/InMemoryStorage.js", "../../@aws-sdk/credential-provider-cognito-identity/dist-es/localStorage.js", "../../@aws-sdk/credential-provider-cognito-identity/dist-es/fromCognitoIdentityPool.js", "../../@aws-sdk/credential-providers/dist-es/fromCognitoIdentity.js", "../../@aws-sdk/credential-providers/dist-es/fromCognitoIdentityPool.js", "../../@aws-sdk/credential-provider-http/dist-es/fromHttp/checkUrl.js", "../../@aws-sdk/credential-provider-http/dist-es/fromHttp/requestHelpers.js", "../../@aws-sdk/credential-provider-http/dist-es/fromHttp/retry-wrapper.js", "../../@aws-sdk/credential-provider-http/dist-es/fromHttp/fromHttp.browser.js", "../../@aws-sdk/credential-providers/dist-es/fromTemporaryCredentials.base.js", "../../@aws-sdk/credential-provider-web-identity/dist-es/fromWebToken.js", "../../@aws-sdk/credential-providers/dist-es/fromWebToken.js"],
  "sourcesContent": ["export function resolveLogins(logins) {\n    return Promise.all(Object.keys(logins).reduce((arr, name) => {\n        const tokenOrProvider = logins[name];\n        if (typeof tokenOrProvider === \"string\") {\n            arr.push([name, tokenOrProvider]);\n        }\n        else {\n            arr.push(tokenOrProvider().then((token) => [name, token]));\n        }\n        return arr;\n    }, [])).then((resolvedPairs) => resolvedPairs.reduce((logins, [key, value]) => {\n        logins[key] = value;\n        return logins;\n    }, {}));\n}\n", "import { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { resolveLogins } from \"./resolveLogins\";\nexport function fromCognitoIdentity(parameters) {\n    return async (awsIdentityProperties) => {\n        parameters.logger?.debug(\"@aws-sdk/credential-provider-cognito-identity - fromCognitoIdentity\");\n        const { GetCredentialsForIdentityCommand, CognitoIdentityClient } = await import(\"./loadCognitoIdentity\");\n        const fromConfigs = (property) => parameters.clientConfig?.[property] ??\n            parameters.parentClientConfig?.[property] ??\n            awsIdentityProperties?.callerClientConfig?.[property];\n        const { Credentials: { AccessKeyId = throwOnMissingAccessKeyId(parameters.logger), Expiration, SecretKey = throwOnMissingSecretKey(parameters.logger), SessionToken, } = throwOnMissingCredentials(parameters.logger), } = await (parameters.client ??\n            new CognitoIdentityClient(Object.assign({}, parameters.clientConfig ?? {}, {\n                region: fromConfigs(\"region\"),\n                profile: fromConfigs(\"profile\"),\n            }))).send(new GetCredentialsForIdentityCommand({\n            CustomRoleArn: parameters.customRoleArn,\n            IdentityId: parameters.identityId,\n            Logins: parameters.logins ? await resolveLogins(parameters.logins) : undefined,\n        }));\n        return {\n            identityId: parameters.identityId,\n            accessKeyId: AccessKeyId,\n            secretAccessKey: SecretKey,\n            sessionToken: SessionToken,\n            expiration: Expiration,\n        };\n    };\n}\nfunction throwOnMissingAccessKeyId(logger) {\n    throw new CredentialsProviderError(\"Response from Amazon Cognito contained no access key ID\", { logger });\n}\nfunction throwOnMissingCredentials(logger) {\n    throw new CredentialsProviderError(\"Response from Amazon Cognito contained no credentials\", { logger });\n}\nfunction throwOnMissingSecretKey(logger) {\n    throw new CredentialsProviderError(\"Response from Amazon Cognito contained no secret key\", { logger });\n}\n", "const STORE_NAME = \"IdentityIds\";\nexport class IndexedDbStorage {\n    dbName;\n    constructor(dbName = \"aws:cognito-identity-ids\") {\n        this.dbName = dbName;\n    }\n    getItem(key) {\n        return this.withObjectStore(\"readonly\", (store) => {\n            const req = store.get(key);\n            return new Promise((resolve) => {\n                req.onerror = () => resolve(null);\n                req.onsuccess = () => resolve(req.result ? req.result.value : null);\n            });\n        }).catch(() => null);\n    }\n    removeItem(key) {\n        return this.withObjectStore(\"readwrite\", (store) => {\n            const req = store.delete(key);\n            return new Promise((resolve, reject) => {\n                req.onerror = () => reject(req.error);\n                req.onsuccess = () => resolve();\n            });\n        });\n    }\n    setItem(id, value) {\n        return this.withObjectStore(\"readwrite\", (store) => {\n            const req = store.put({ id, value });\n            return new Promise((resolve, reject) => {\n                req.onerror = () => reject(req.error);\n                req.onsuccess = () => resolve();\n            });\n        });\n    }\n    getDb() {\n        const openDbRequest = self.indexedDB.open(this.dbName, 1);\n        return new Promise((resolve, reject) => {\n            openDbRequest.onsuccess = () => {\n                resolve(openDbRequest.result);\n            };\n            openDbRequest.onerror = () => {\n                reject(openDbRequest.error);\n            };\n            openDbRequest.onblocked = () => {\n                reject(new Error(\"Unable to access DB\"));\n            };\n            openDbRequest.onupgradeneeded = () => {\n                const db = openDbRequest.result;\n                db.onerror = () => {\n                    reject(new Error(\"Failed to create object store\"));\n                };\n                db.createObjectStore(STORE_NAME, { keyPath: \"id\" });\n            };\n        });\n    }\n    withObjectStore(mode, action) {\n        return this.getDb().then((db) => {\n            const tx = db.transaction(STORE_NAME, mode);\n            tx.oncomplete = () => db.close();\n            return new Promise((resolve, reject) => {\n                tx.onerror = () => reject(tx.error);\n                resolve(action(tx.objectStore(STORE_NAME)));\n            }).catch((err) => {\n                db.close();\n                throw err;\n            });\n        });\n    }\n}\n", "export class InMemoryStorage {\n    store;\n    constructor(store = {}) {\n        this.store = store;\n    }\n    getItem(key) {\n        if (key in this.store) {\n            return this.store[key];\n        }\n        return null;\n    }\n    removeItem(key) {\n        delete this.store[key];\n    }\n    setItem(key, value) {\n        this.store[key] = value;\n    }\n}\n", "import { IndexedDbStorage } from \"./IndexedDbStorage\";\nimport { InMemoryStorage } from \"./InMemoryStorage\";\nconst inMemoryStorage = new InMemoryStorage();\nexport function localStorage() {\n    if (typeof self === \"object\" && self.indexedDB) {\n        return new IndexedDbStorage();\n    }\n    if (typeof window === \"object\" && window.localStorage) {\n        return window.localStorage;\n    }\n    return inMemoryStorage;\n}\n", "import { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { fromCognitoIdentity } from \"./fromCognitoIdentity\";\nimport { localStorage } from \"./localStorage\";\nimport { resolveLogins } from \"./resolveLogins\";\nexport function fromCognitoIdentityPool({ accountId, cache = localStorage(), client, clientConfig, customRoleArn, identityPoolId, logins, userIdentifier = !logins || Object.keys(logins).length === 0 ? \"ANONYMOUS\" : undefined, logger, parentClientConfig, }) {\n    logger?.debug(\"@aws-sdk/credential-provider-cognito-identity - fromCognitoIdentity\");\n    const cacheKey = userIdentifier\n        ? `aws:cognito-identity-credentials:${identityPoolId}:${userIdentifier}`\n        : undefined;\n    let provider = async (awsIdentityProperties) => {\n        const { GetIdCommand, CognitoIdentityClient } = await import(\"./loadCognitoIdentity\");\n        const fromConfigs = (property) => clientConfig?.[property] ??\n            parentClientConfig?.[property] ??\n            awsIdentityProperties?.callerClientConfig?.[property];\n        const _client = client ??\n            new CognitoIdentityClient(Object.assign({}, clientConfig ?? {}, {\n                region: fromConfigs(\"region\"),\n                profile: fromConfigs(\"profile\"),\n            }));\n        let identityId = (cacheKey && (await cache.getItem(cacheKey)));\n        if (!identityId) {\n            const { IdentityId = throwOnMissingId(logger) } = await _client.send(new GetIdCommand({\n                AccountId: accountId,\n                IdentityPoolId: identityPoolId,\n                Logins: logins ? await resolveLogins(logins) : undefined,\n            }));\n            identityId = IdentityId;\n            if (cacheKey) {\n                Promise.resolve(cache.setItem(cacheKey, identityId)).catch(() => { });\n            }\n        }\n        provider = fromCognitoIdentity({\n            client: _client,\n            customRoleArn,\n            logins,\n            identityId,\n        });\n        return provider(awsIdentityProperties);\n    };\n    return (awsIdentityProperties) => provider(awsIdentityProperties).catch(async (err) => {\n        if (cacheKey) {\n            Promise.resolve(cache.removeItem(cacheKey)).catch(() => { });\n        }\n        throw err;\n    });\n}\nfunction throwOnMissingId(logger) {\n    throw new CredentialsProviderError(\"Response from Amazon Cognito contained no identity ID\", { logger });\n}\n", "import { fromCognitoIdentity as _fromCognitoIdentity, } from \"@aws-sdk/credential-provider-cognito-identity\";\nexport const fromCognitoIdentity = (options) => _fromCognitoIdentity({\n    ...options,\n});\n", "import { fromCognitoIdentityPool as _fromCognitoIdentityPool, } from \"@aws-sdk/credential-provider-cognito-identity\";\nexport const fromCognitoIdentityPool = (options) => _fromCognitoIdentityPool({\n    ...options,\n});\n", "import { CredentialsProviderError } from \"@smithy/property-provider\";\nconst LOOPBACK_CIDR_IPv4 = \"127.0.0.0/8\";\nconst LOOPBACK_CIDR_IPv6 = \"::1/128\";\nconst ECS_CONTAINER_HOST = \"169.254.170.2\";\nconst EKS_CONTAINER_HOST_IPv4 = \"169.254.170.23\";\nconst EKS_CONTAINER_HOST_IPv6 = \"[fd00:ec2::23]\";\nexport const checkUrl = (url, logger) => {\n    if (url.protocol === \"https:\") {\n        return;\n    }\n    if (url.hostname === ECS_CONTAINER_HOST ||\n        url.hostname === EKS_CONTAINER_HOST_IPv4 ||\n        url.hostname === EKS_CONTAINER_HOST_IPv6) {\n        return;\n    }\n    if (url.hostname.includes(\"[\")) {\n        if (url.hostname === \"[::1]\" || url.hostname === \"[0000:0000:0000:0000:0000:0000:0000:0001]\") {\n            return;\n        }\n    }\n    else {\n        if (url.hostname === \"localhost\") {\n            return;\n        }\n        const ipComponents = url.hostname.split(\".\");\n        const inRange = (component) => {\n            const num = parseInt(component, 10);\n            return 0 <= num && num <= 255;\n        };\n        if (ipComponents[0] === \"127\" &&\n            inRange(ipComponents[1]) &&\n            inRange(ipComponents[2]) &&\n            inRange(ipComponents[3]) &&\n            ipComponents.length === 4) {\n            return;\n        }\n    }\n    throw new CredentialsProviderError(`URL not accepted. It must either be HTTPS or match one of the following:\n  - loopback CIDR 127.0.0.0/8 or [::1/128]\n  - ECS container host 169.254.170.2\n  - EKS container host 169.254.170.23 or [fd00:ec2::23]`, { logger });\n};\n", "import { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { HttpRequest } from \"@smithy/protocol-http\";\nimport { parseRfc3339DateTime } from \"@smithy/smithy-client\";\nimport { sdkStreamMixin } from \"@smithy/util-stream\";\nexport function createGetRequest(url) {\n    return new HttpRequest({\n        protocol: url.protocol,\n        hostname: url.hostname,\n        port: Number(url.port),\n        path: url.pathname,\n        query: Array.from(url.searchParams.entries()).reduce((acc, [k, v]) => {\n            acc[k] = v;\n            return acc;\n        }, {}),\n        fragment: url.hash,\n    });\n}\nexport async function getCredentials(response, logger) {\n    const stream = sdkStreamMixin(response.body);\n    const str = await stream.transformToString();\n    if (response.statusCode === 200) {\n        const parsed = JSON.parse(str);\n        if (typeof parsed.AccessKeyId !== \"string\" ||\n            typeof parsed.SecretAccessKey !== \"string\" ||\n            typeof parsed.Token !== \"string\" ||\n            typeof parsed.Expiration !== \"string\") {\n            throw new CredentialsProviderError(\"HTTP credential provider response not of the required format, an object matching: \" +\n                \"{ AccessKeyId: string, SecretAccessKey: string, Token: string, Expiration: string(rfc3339) }\", { logger });\n        }\n        return {\n            accessKeyId: parsed.AccessKeyId,\n            secretAccessKey: parsed.SecretAccessKey,\n            sessionToken: parsed.Token,\n            expiration: parseRfc3339DateTime(parsed.Expiration),\n        };\n    }\n    if (response.statusCode >= 400 && response.statusCode < 500) {\n        let parsedBody = {};\n        try {\n            parsedBody = JSON.parse(str);\n        }\n        catch (e) { }\n        throw Object.assign(new CredentialsProviderError(`Server responded with status: ${response.statusCode}`, { logger }), {\n            Code: parsedBody.Code,\n            Message: parsedBody.Message,\n        });\n    }\n    throw new CredentialsProviderError(`Server responded with status: ${response.statusCode}`, { logger });\n}\n", "export const retryWrapper = (toRetry, maxRetries, delayMs) => {\n    return async () => {\n        for (let i = 0; i < maxRetries; ++i) {\n            try {\n                return await toRetry();\n            }\n            catch (e) {\n                await new Promise((resolve) => setTimeout(resolve, delayMs));\n            }\n        }\n        return await toRetry();\n    };\n};\n", "import { FetchHttpHandler } from \"@smithy/fetch-http-handler\";\nimport { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { checkUrl } from \"./checkUrl\";\nimport { createGetRequest, getCredentials } from \"./requestHelpers\";\nimport { retryWrapper } from \"./retry-wrapper\";\nexport const fromHttp = (options = {}) => {\n    options.logger?.debug(\"@aws-sdk/credential-provider-http - fromHttp\");\n    let host;\n    const full = options.credentialsFullUri;\n    if (full) {\n        host = full;\n    }\n    else {\n        throw new CredentialsProviderError(\"No HTTP credential provider host provided.\", { logger: options.logger });\n    }\n    const url = new URL(host);\n    checkUrl(url, options.logger);\n    const requestHandler = new FetchHttpHandler();\n    return retryWrapper(async () => {\n        const request = createGetRequest(url);\n        if (options.authorizationToken) {\n            request.headers.Authorization = options.authorizationToken;\n        }\n        const result = await requestHandler.handle(request);\n        return getCredentials(result.response);\n    }, options.maxRetries ?? 3, options.timeout ?? 1000);\n};\n", "import { normalizeProvider } from \"@smithy/core\";\nimport { CredentialsProviderError } from \"@smithy/property-provider\";\nconst ASSUME_ROLE_DEFAULT_REGION = \"us-east-1\";\nexport const fromTemporaryCredentials = (options, credentialDefaultProvider, regionProvider) => {\n    let stsClient;\n    return async (awsIdentityProperties = {}) => {\n        const { callerClientConfig } = awsIdentityProperties;\n        const profile = options.clientConfig?.profile ?? callerClientConfig?.profile;\n        const logger = options.logger ?? callerClientConfig?.logger;\n        logger?.debug(\"@aws-sdk/credential-providers - fromTemporaryCredentials (STS)\");\n        const params = { ...options.params, RoleSessionName: options.params.RoleSessionName ?? \"aws-sdk-js-\" + Date.now() };\n        if (params?.SerialNumber) {\n            if (!options.mfaCodeProvider) {\n                throw new CredentialsProviderError(`Temporary credential requires multi-factor authentication, but no MFA code callback was provided.`, {\n                    tryNextLink: false,\n                    logger,\n                });\n            }\n            params.TokenCode = await options.mfaCodeProvider(params?.SerialNumber);\n        }\n        const { AssumeRoleCommand, STSClient } = await import(\"./loadSts\");\n        if (!stsClient) {\n            const defaultCredentialsOrError = typeof credentialDefaultProvider === \"function\" ? credentialDefaultProvider() : undefined;\n            const credentialSources = [\n                options.masterCredentials,\n                options.clientConfig?.credentials,\n                void callerClientConfig?.credentials,\n                callerClientConfig?.credentialDefaultProvider?.(),\n                defaultCredentialsOrError,\n            ];\n            let credentialSource = \"STS client default credentials\";\n            if (credentialSources[0]) {\n                credentialSource = \"options.masterCredentials\";\n            }\n            else if (credentialSources[1]) {\n                credentialSource = \"options.clientConfig.credentials\";\n            }\n            else if (credentialSources[2]) {\n                credentialSource = \"caller client's credentials\";\n                throw new Error(\"fromTemporaryCredentials recursion in callerClientConfig.credentials\");\n            }\n            else if (credentialSources[3]) {\n                credentialSource = \"caller client's credentialDefaultProvider\";\n            }\n            else if (credentialSources[4]) {\n                credentialSource = \"AWS SDK default credentials\";\n            }\n            const regionSources = [\n                options.clientConfig?.region,\n                callerClientConfig?.region,\n                await regionProvider?.({\n                    profile,\n                }),\n                ASSUME_ROLE_DEFAULT_REGION,\n            ];\n            let regionSource = \"default partition's default region\";\n            if (regionSources[0]) {\n                regionSource = \"options.clientConfig.region\";\n            }\n            else if (regionSources[1]) {\n                regionSource = \"caller client's region\";\n            }\n            else if (regionSources[2]) {\n                regionSource = \"file or env region\";\n            }\n            const requestHandlerSources = [\n                filterRequestHandler(options.clientConfig?.requestHandler),\n                filterRequestHandler(callerClientConfig?.requestHandler),\n            ];\n            let requestHandlerSource = \"STS default requestHandler\";\n            if (requestHandlerSources[0]) {\n                requestHandlerSource = \"options.clientConfig.requestHandler\";\n            }\n            else if (requestHandlerSources[1]) {\n                requestHandlerSource = \"caller client's requestHandler\";\n            }\n            logger?.debug?.(`@aws-sdk/credential-providers - fromTemporaryCredentials STS client init with ` +\n                `${regionSource}=${await normalizeProvider(coalesce(regionSources))()}, ${credentialSource}, ${requestHandlerSource}.`);\n            stsClient = new STSClient({\n                ...options.clientConfig,\n                credentials: coalesce(credentialSources),\n                logger,\n                profile,\n                region: coalesce(regionSources),\n                requestHandler: coalesce(requestHandlerSources),\n            });\n        }\n        if (options.clientPlugins) {\n            for (const plugin of options.clientPlugins) {\n                stsClient.middlewareStack.use(plugin);\n            }\n        }\n        const { Credentials } = await stsClient.send(new AssumeRoleCommand(params));\n        if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {\n            throw new CredentialsProviderError(`Invalid response from STS.assumeRole call with role ${params.RoleArn}`, {\n                logger,\n            });\n        }\n        return {\n            accessKeyId: Credentials.AccessKeyId,\n            secretAccessKey: Credentials.SecretAccessKey,\n            sessionToken: Credentials.SessionToken,\n            expiration: Credentials.Expiration,\n            credentialScope: Credentials.CredentialScope,\n        };\n    };\n};\nconst filterRequestHandler = (requestHandler) => {\n    return requestHandler?.metadata?.handlerProtocol === \"h2\" ? undefined : requestHandler;\n};\nconst coalesce = (args) => {\n    for (const item of args) {\n        if (item !== undefined) {\n            return item;\n        }\n    }\n};\n", "export const fromWebToken = (init) => async (awsIdentityProperties) => {\n    init.logger?.debug(\"@aws-sdk/credential-provider-web-identity - fromWebToken\");\n    const { roleArn, roleSessionName, webIdentityToken, providerId, policyArns, policy, durationSeconds } = init;\n    let { roleAssumerWithWebIdentity } = init;\n    if (!roleAssumerWithWebIdentity) {\n        const { getDefaultRoleAssumerWithWebIdentity } = await import(\"@aws-sdk/nested-clients/sts\");\n        roleAssumerWithWebIdentity = getDefaultRoleAssumerWithWebIdentity({\n            ...init.clientConfig,\n            credentialProviderLogger: init.logger,\n            parentClientConfig: {\n                ...awsIdentityProperties?.callerClientConfig,\n                ...init.parentClientConfig,\n            },\n        }, init.clientPlugins);\n    }\n    return roleAssumerWithWebIdentity({\n        RoleArn: roleArn,\n        RoleSessionName: roleSessionName ?? `aws-sdk-js-session-${Date.now()}`,\n        WebIdentityToken: webIdentityToken,\n        ProviderId: providerId,\n        PolicyArns: policyArns,\n        Policy: policy,\n        DurationSeconds: durationSeconds,\n    });\n};\n", "import { fromWebToken as _fromWebToken } from \"@aws-sdk/credential-provider-web-identity\";\nexport const fromWebToken = (init) => _fromWebToken({\n    ...init,\n});\n"],
  "mappings": "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",
  "names": ["logins", "_a", "fromCognitoIdentity", "fromCognitoIdentityPool", "fromWebToken"]
}
